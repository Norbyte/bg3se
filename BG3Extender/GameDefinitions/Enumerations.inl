BEGIN_ENUM(LuaTypeId, uint32_t)
	EV(Unknown, 0)
	EV(Void, 1)
	EV(Boolean, 2)
	EV(Integer, 3)
	EV(Float, 4)
	EV(String, 5)
	EV(Object, 6)
	EV(Array, 7)
	EV(Set, 8)
	EV(Map, 9)
	EV(Tuple, 10)
	EV(Enumeration, 11)
	EV(Function, 12)
	EV(Any, 13)
	EV(Nullable, 14)
	EV(Module, 15)
	EV(Variant, 16)
END_ENUM()

BEGIN_ENUM(PathRootType, int)
	EV(Root, 0)
	EV(Data, 1)
	EV(Public, 2)
	EV(LocalAppData, 3)
	EV(UserProfile, 4)
	EV(Localization, 5)
	EV(Bin, 6)
	EV(Bin2, 7)
	EV(Mods, 8)
	EV(Projects, 9)
	EV(Public2, 10)
	EV(GameMod, 11)
	EV(EngineMod, 12)
	EV(Scripts, 13)
	EV(WorkingDir, 14)
	EV(Debug, 15)
END_ENUM()

BEGIN_BITMASK(InputType, int)
	EV(Unknown, 0)
	EV(Press, 1)
	EV(Release, 2)
	EV(ValueChange, 4)
	EV(Hold, 8)
	EV(Repeat, 16)
	EV(AcceleratedRepeat, 32)
END_ENUM()

BEGIN_ENUM(ExtSystemType, uint32_t)
	E(UISystem)
	E(Max)
END_ENUM()

BEGIN_ENUM(ExtResourceManagerType, uint32_t)
	E(AbilityDistributionPreset)
	E(AbilityList)
	E(ActionResourceGroup)
	E(ActionResource)
	E(ApprovalRating)
	E(AreaLevelOverride)
	E(AvatarContainerTemplate)
	E(BackgroundGoal)
	E(Background)
	E(CalendarDayRange)
	E(CampChestTemplate)

	E(AbilityDefaultValues)
	E(EquipmentDefaultValues)
	E(FeatDefaultValues)
	E(PassiveDefaultValues)
	E(PreparedSpellDefaultValues)
	E(SkillDefaultValues)
	E(SpellDefaultValues)

	E(CharacterCreationAccessorySet)
	E(CharacterCreationAppearanceMaterial)
	E(CharacterCreationAppearanceVisual)
	E(CharacterCreationEquipmentIcons)
	E(CharacterCreationEyeColor)
	E(CharacterCreationIconSettings)
	E(CharacterCreationHairColor)
	E(CharacterCreationMaterialOverride)
	E(CharacterCreationPassiveAppearance)
	E(CharacterCreationPreset)
	E(CharacterCreationSharedVisual)
	E(CharacterCreationSkinColor)
	E(CharacterCreationVOLine)

	E(CinematicArenaFrequencyGroup)
	E(ClassDescription)
	E(ColorDefinition)
	E(CompanionPreset)
	E(CustomDice)
	E(ConditionError)
	E(DeathTypeEffect)
	E(DifficultyClass)
	E(DisturbanceProperty)
	E(DLC)
	E(EncumbranceType)
	E(EquipmentList)
	E(EquipmentType)
	E(ExperienceReward)
	E(Faction)
	E(FeatSoundState)
	E(Feat)
	E(FeatDescription)
	E(FlagSoundState)
	E(God)
	E(GoldReward)
	E(Gossip)
	E(FixedHotBarSlot)
	E(ItemThrowParams)
	E(ItemWallTemplate)
	E(TrajectoryRules)
	E(LevelMap)
	E(LimbsMapping)
	E(LongRestCost)
	E(ManagedStatusVFX)
	E(MultiEffectInfo)
	E(OriginIntroEntity)
	E(Origin)
	E(PassiveList)
	E(PassiveVFX)
	E(ProgressionDescription)
	E(Progression)
	E(ProjectileDefault)
	E(Race)
	E(RandomCastOutcome)
	E(SkillList)
	E(SpellSoundTrajectory)
	E(SpellList)
	E(StatusSoundState)
	E(SurfaceCursorMessage)
	E(TadpolePower)
	E(TagSoundState)
	E(TooltipExtraText)
	E(TooltipUpcastDescription)
	E(TutorialEntries)
	E(TutorialModalEntries)
	E(TutorialUnifiedEntry)
	E(TutorialEvent)
	E(VFX)
	E(Voice)
	E(WeaponAnimationSet)
	E(WeightCategory)
	E(ShapeshiftRule)
	E(AnimationSetPriority)
	E(SpellMetaCondition)
	E(ScriptMaterialParameterOverride)
	E(ScriptMaterialPresetOverride)
	E(VisualLocatorAttachment)
	E(Flag)
	E(Tag)
	E(RulesetModifier)
	E(RulesetModifierOption)
	E(Ruleset)
	E(RulesetValue)
	E(RulesetSelectionPreset)
	E(Max)
END_ENUM()

BEGIN_ENUM(ExtComponentType, uint32_t)
	E(ActionResources)
	E(Armor)
	E(ArmorSetState)
	E(BaseHp)
	E(Bound)
	E(IsCharacter)
	E(Data)
	E(Detached)
	E(Experience)
	E(Health)
	E(Resistances)
	E(Hearing)
	E(SpellBook)
	E(Stats)
	E(StatusImmunities)
	E(SurfacePathInfluences)
	E(Use)
	E(Value)
	E(Weapon)
	E(Wielding)
	E(CustomStats)
	E(BoostCondition)
	E(BoostsContainer)
	E(ServerBoostBase)
	E(ServerStatusBoostsProcessed)
	E(ActionResourceConsumeMultiplierBoost)
	E(Tag)
	E(SpellBookPrepares)
	E(Transform)
	E(BoostInfo)
	E(Relation)
	E(Faction)
	E(CanInteract)
	E(CanSpeak)
	E(Origin)
	E(Level)
	E(EocLevel)
	E(Classes)
	E(MaterialParameterOverride)
	E(OffStage)
	E(PickingState)
	E(Player)
	E(SimpleCharacter)
	E(Speaker)
	E(WeaponSet)
	E(DifficultyCheck)
	E(AttributeFlags)
	E(BodyType)
	E(ObjectSize)
	E(BaseStats)
	E(Expertise)
	E(HealBlock)
	E(Ruleset)
	E(RulesetModifiers)

	// Stats
	E(ServerBaseData)
	E(ServerBaseSize)
	E(ServerBaseStats)
	E(ServerBaseWeapon)
	E(ServerBaseProficiency)
	E(ServerProficiencyGroupStats)

	// Shapeshift
	E(ShapeshiftState)
	E(ShapeshiftHealthReservation)
	E(ServerShapeshiftStates)

	// Animations
	E(AnimationWaterfall)
	E(DynamicAnimationTags)
	E(TemplateAnimationSetOverride)

	// Passives
	E(PassiveContainer)
	E(Passive)
	E(PassiveUsageCount)

	// Item components
	E(ItemDestroyed)
	E(ItemDye)
	E(MapMarkerStyle)
	E(ItemPortal)
	E(IsDoor)
	E(ExamineDisabled)
	E(ItemHasMoved)
	E(HasOpened)
	E(IsGold)
	E(IsItem)
	E(NewInInventory)
	E(ShouldDestroyOnSpellCast)

	// Item template components
	E(ActionType)
	E(ItemCanMove)
	E(ClimbOn)
	E(ItemTemplateDestroyed)
	E(InteractionDisabled)
	E(IsStoryItem)
	E(Ladder)
	E(WalkOn)
	E(UseAction)

	// Ownership
	E(OwnedAsLoot)
	E(OwneeCurrent)
	E(ServerDynamicLayerOwner)
	E(ServerIsCurrentOwner)
	E(ServerIsLatestOwner)
	E(ServerIsPreviousLatestOwner)
	E(ServerIsPreviousOwner)
	E(ServerIsOriginalOwner)
	E(ServerOwneeHistory)
	E(ServerOwneeRequest)

	// Inventory components
	E(InventoryMember)
	E(InventoryData)
	E(InventoryOwner)
	E(InventoryIsOwned)
	E(InventoryContainer)
	E(InventoryMemberTransform)
	E(InventoryStack)
	E(InventoryStackMember)
	E(InventoryWeight)
	E(Wielded)
	E(CanBeInInventory)
	E(CannotBePickpocketed)
	E(CannotBeTakenOut)
	E(DropOnDeathBlocked)
	E(NewItemsInside)
	E(NonTradable)

	E(ServerInventoryContainerData)
	E(ServerInventoryGroupCheck)
	E(ServerShapeshiftEquipmentHistory)
	E(CharacterHasGeneratedTradeTreasure)
	E(ServerInventoryIsReplicatedWith)
	E(ItemHasGeneratedTreasure)
	E(ReadyToBeAddedToInventory)

	E(InventoryPropertyCanBePickpocketed)
	E(ScriptPropertyCanBePickpocketed)
	E(InventoryPropertyIsDroppedOnDeath)
	E(ScriptPropertyIsDroppedOnDeath)
	E(InventoryPropertyIsTradable)
	E(ScriptPropertyIsTradable)

	// Party
	E(PartyView)
	E(PartyComposition)
	E(PartyPortals)
	E(PartyRecipes)
	E(PartyWaypoints)
	E(PartyMember)
	E(PartyFollower)
	E(CurrentlyFollowingParty)
	E(BlockFollow)
	E(Recruiter)
	E(ServerUserSnapshot)

	// Escort
	E(EscortFollower)
	E(EscortLeader)
	E(EscortLeaderPriority)
	E(EscortMember)
	E(EscortStragglersTracker)
	E(EscortHasStragglers)

	// Camp components
	E(CampChest)
	E(CampEndTheDayState)
	E(CampQuality)
	E(CampSettings)
	E(CampSupply)
	E(CampTotalSupplies)
	E(CampPresence)

	// Combat components
	E(IsInCombat)
	E(CombatParticipant)
	E(CombatState)
	E(TurnBased)
	E(TurnOrder)
	E(IsCombatPaused)
	E(ThreatRange)

	// Death
	E(Death)
	E(DeathState)
	E(DeadByDefault)
	E(ServerKiller)
	E(ServerDeathState)
	E(ServerDeathContinue)

	// Hit
	E(HitTarget)
	E(HitAttacker)
	E(HitWeapon)
	E(HitThrownObject)
	E(HitProxy)
	E(HitProxyOwner)
	E(HitReaction)

	// Identity
	E(Identity)
	E(IdentityState)
	E(OriginalIdentity)

	// Server combat components
	E(ServerCanStartCombat)
	E(ServerCombatGroupMapping)
	E(ServerEnterRequest)
	E(ServerFleeBlocked)
	E(ServerImmediateJoin)

	// Ai
	E(ServerAiInterestedInItems)
	E(ServerAiInterestingItem)
	E(ServerAiArchetype)
	E(ServerAiModifiers)

	// Spell components
	E(SpellContainer)
	E(PlayerPrepareSpell)
	E(CCPrepareSpell)
	E(SpellModificationContainer)
	E(AddedSpells)
	E(SpellBookCooldowns)
	E(LearnedSpells)
	E(SpellAiConditions)
	E(OnDamageSpells)

	// Spell casting
	E(SpellCastAnimationInfo)
	E(SpellCastCache)
	E(SpellCastCanBeTargeted)
	E(SpellCastIsCasting)
	E(SpellCastInterruptResults)
	E(SpellCastMovement)
	E(SpellCastRolls)
	E(SpellCastState)
	E(SpellSyncTargeting)

	// Server spell casting
	E(ServerSpellCastHitDelay)
	E(ServerSpellCastResponsible)
	E(ServerSpellClientInitiated)
	E(ServerSpellExternals)
	E(ServerSpellHitRegister)
	E(ServerSpellInterruptRequests)
	E(ServerSpellInterruptResults)
	E(ServerSpellCastState)

	// Interrupts
	E(InterruptActionState)
	E(InterruptConditionallyDisabled)
	E(InterruptContainer)
	E(InterruptData)
	E(InterruptDecision)
	E(InterruptPreferences)
	E(InterruptPrepared)
	E(InterruptZone)
	E(InterruptZoneParticipant)
	E(InterruptZoneSource)

	// Server interrupts
	E(ServerInterruptAddRemoveRequests)
	E(ServerInterruptActionRequests)
	E(ServerInterruptZoneRequests)
	E(ServerInterruptInitialParticipants)
	E(ServerInterruptTurnOrderInZone)

	// Sight
	E(Sight)
	E(SightData)
	E(SightEntityViewshed)

	// Status
	E(StatusContainer)
	E(StatusCause)
	E(StatusID)
	E(StatusIncapacitated)
	E(StatusLifetime)
	E(StatusVisualDisabled)

	E(ServerStatusCause)
	E(ServerStatus)
	E(ServerStatusOwnership)
	E(ServerStatusDifficultyModifiers)
	E(ServerStatusUnique)
	E(ServerStatusPerforming)
	E(ServerStatusActive)
	E(ServerStatusAddedFromSaveLoad)
	E(ServerStatusAura)

	// Tadpole
	E(TadpoleTreeState)
	E(TadpolePowers)
	E(Tadpoled)
	E(HalfIllithid)
	E(FullIllithid)

	// Character creation
	E(CCCompanionDefinition)
	E(CCDefinitionCommon)
	E(CCFullRespecDefinition)
	E(CCRespecDefinition)
	E(CCChangeAppearanceDefinition)
	E(CCCharacterDefinition)
	E(CCSessionCommon)
	E(CCState)
	E(CCLevelUp)
	E(CCLevelUpDefinition)
	E(CCFullRespec)
	E(CCRespec)
	E(CCCreation)
	E(CCDefinitionLevelUp)

	E(ClientCCDefinitionState)
	E(ClientCCDefinitionStateEx)
	E(ClientCCBaseDefinitionState)
	E(ClientCCCompanionDefinition)
	E(ClientCCLevelUpDefinition)
	E(ClientCCChangeAppearanceDefinition)
	E(ClientCCFullRespecDefinition)
	E(ClientCCDummyDefinition)

	E(ServerCCAppearanceVisualTag)
	E(ServerCCEquipmentSetRequest)
	E(ServerCCGod)
	E(ServerCCUpdates)
	E(ServerCCIsCustom)

	// Experimental components
	E(Background)
	E(God)
	E(Proficiency)
	E(ProficiencyGroup)
	E(LevelUp)
	E(Floating)
	E(Voice)
	E(CustomIcon)
	E(CharacterCreationStats)
	E(Disarmable)
	E(ShortRest)
	E(IsSummon)
	E(SummonContainer)
	E(Stealth)
	E(ClientControl)
	E(IsGlobal)
	E(Savegame)
	E(DisabledEquipment)
	E(LootingState)
	E(Loot)
	E(Lock)
	E(Key)
	E(SummonLifetime)
	E(Invisibility)
	E(Icon)
	E(HotbarContainer)
	E(HotbarDecks)
	E(OriginTag)
	E(OriginPassives)
	E(ClassTag)
	E(BackgroundTag)
	E(OriginAppearanceTag)
	E(VoiceTag)
	E(GodTag)
	E(BackgroundPassives)
	E(GlobalShortRestDisabled)
	E(GlobalLongRestDisabled)
	E(StoryShortRestDisabled)
	E(FleeCapability)
	E(CanDoRest)
	E(IsInTurnBasedMode)
	E(ItemBoosts)
	E(ActiveCharacterLight)
	E(Visual)
	E(ClientEquipmentVisuals)
	E(AnimationSet)
	E(AnimationBlueprint)
	E(CanModifyHealth)
	E(AvailableLevel)
	E(CanBeLooted)
	E(CanBeDisarmed)
	E(CanTriggerRandomCasts)
	E(CanDoActions)
	E(ActionUseConditions)
	E(CanMove)
	E(CanSense)
	E(Concentration)
	E(Darkness)
	E(DualWielding)
	E(GameObjectVisual)
	E(AppearanceOverride)
	E(CharacterCreationTemplateOverride)
	E(GravityDisabled)
	E(GravityDisabledUntilMoved)
	E(CanBeWielded)
	E(Avatar)
	E(HasExclamationDialog)
	E(Trader)
	E(Ambushing)
	E(InteractionFilter)
	E(DisplayName)
	E(CustomName)
	E(Equipable)
	E(GameplayLight)
	E(Race)
	E(CanTravel)
	E(Movement)
	E(ObjectInteraction)
	E(StaticPhysics)
	E(Pathing)
	E(Steering)
	E(CanDeflectProjectiles)
	E(ActiveSkeletonSlots)
	E(Net)
	E(Physics)
	E(FTBParticipant)
	E(FTBZoneBlockReason)
	E(FTBRespect)
	E(ApprovalRatings)
	E(AttitudesToPlayers)
	E(CharacterCreationAppearance)
	E(Active)
	E(EquipmentVisual)
	E(Repose)
	E(OriginalTemplate)
	E(CanEnterChasm)
	E(DialogState)
	E(EncumbranceState)
	E(EncumbranceStats)
	E(Unsheath)
	E(UseSocket)
	E(UserAvatar)
	E(UserReservedFor)

	E(BackgroundGoals)

	E(CalendarDaysPassed)
	E(CalendarStartingDate)

	// Progression
	E(ProgressionContainer)
	E(ProgressionMeta)
	E(ProgressionChangedContainers)

	// Through
	E(CanSeeThrough)
	E(CanShootThrough)
	E(CanWalkThrough)
	E(ShootThroughType)

	// Experimental server components
	E(ServerRecruitedBy)
	E(ServerGameTimer)
	E(ServerExperienceGaveOut)
	E(ServerReplicationDependency)
	E(ServerIsUnsummoning)
	E(ServerActivationGroupContainer)
	E(ServerAnubisTag)
	E(ServerDialogTag)
	E(ServerDisplayNameList)
	E(ServerIconList)
	E(ServerRaceTag)
	E(ServerTemplateTag)
	E(ServerBoostTag)
	E(ServerSafePosition)
	E(ServerAnubisExecutor)
	E(ServerLeader)
	E(ServerBreadcrumb)
	E(ServerDelayDeathCause)
	E(ServerPickpocket)
	E(ServerReplicationDependencyOwner)
	E(ServerGameplayLightEquipment)
	E(HistoryTargetUUID)
	E(ServerGameplayLightChanges)
	E(ServerPeersInRange)
	E(ServerSurface)
	E(ServerDisarmAttempt)
	E(ServerUnsheath)
	E(ServerUnsheathScriptOverride)
	E(ServerIsLightBlocker)
	E(ServerIsVisionBlocker)
	E(ServerDarknessActive)
	E(ServerHotbarOrder)
	E(ServerInventoryItemDataPopulated)
	E(ServerVariableManager)
	E(IsMarkedForDeletion)
	E(JumpFollow)

	// Passives
	E(ServerToggledPassives)
	E(ServerPassiveBase)
	E(ServerPassivePersistentData)
	E(ServerScriptPassives)

	E(ServerCharacter)
	E(ServerItem)

	// Projectile
	E(ProjectileSource)
	E(ServerProjectile)
	E(ServerProjectileAttachment)
	E(ServerProjectileSpell)
	E(ServerProjectileInitialization)
	E(ServerOsirisTag)

	E(ClientCharacter)
	E(ClientItem)
	E(ClientProjectile)

	// Boost components
	E(ArmorClassBoost)
	E(AbilityBoost)
	E(RollBonusBoost)
	E(AdvantageBoost)
	E(ActionResourceValueBoost)
	E(CriticalHitBoost)
	E(AbilityFailedSavingThrowBoost)
	E(ResistanceBoost)
	E(WeaponDamageResistanceBoost)
	E(ProficiencyBonusOverrideBoost)
	E(JumpMaxDistanceMultiplierBoost)
	E(HalveWeaponDamageBoost)
	E(UnlockSpellBoost)
	E(SourceAdvantageBoost)
	E(ProficiencyBonusBoost)
	E(ProficiencyBoost)
	E(IncreaseMaxHPBoost)
	E(ActionResourceBlockBoost)
	E(StatusImmunityBoost)
	E(UseBoosts)
	E(CannotHarmCauseEntityBoost)
	E(TemporaryHPBoost)
	E(WeightBoost)
	E(WeightCategoryBoost)
	E(FactionOverrideBoost)
	E(ActionResourceMultiplierBoost)
	E(BlockRegainHPBoost)
	E(InitiativeBoost)
	E(DarkvisionRangeBoost)
	E(DarkvisionRangeMinBoost)
	E(DarkvisionRangeOverrideBoost)
	E(AddTagBoost)
	E(IgnoreDamageThresholdMinBoost)
	E(SkillBoost)
	E(WeaponDamageBoost)
	E(NullifyAbilityBoost)
	E(RerollBoost)
	E(DownedStatusBoost)
	E(WeaponEnchantmentBoost)
	E(GuaranteedChanceRollOutcomeBoost)
	E(AttributeBoost)
	E(GameplayLightBoost)
	E(DualWieldingBoost)
	E(SavantBoost)
	E(MinimumRollResultBoost)
	E(CharacterWeaponDamageBoost)
	E(ProjectileDeflectBoost)
	E(AbilityOverrideMinimumBoost)
	E(ACOverrideFormulaBoost)
	E(FallDamageMultiplierBoost)
	E(ActiveCharacterLightBoost)
	E(WeaponAttackTypeOverrideBoost)
	E(WeaponDamageDieOverrideBoost)
	E(CarryCapacityMultiplierBoost)
	E(WeaponPropertyBoost)
	E(WeaponAttackRollAbilityOverrideBoost)
	E(SightRangeAdditiveBoost)
	E(SightRangeMinimumBoost)
	E(SightRangeMaximumBoost)
	E(SightRangeOverrideBoost)
	E(MovementSpeedLimitBoost)
	E(UnlockSpellVariantBoost)
	E(DetectCrimesBlockBoost)
	E(BlockAbilityModifierFromACBoost)
	E(ScaleMultiplierBoost)
	E(DamageReductionBoost)
	E(ReduceCriticalAttackThresholdBoost)
	E(PhysicalForceRangeBonusBoost)
	E(ObjectSizeBoost)
	E(ObjectSizeOverrideBoost)
	E(AiArchetypeOverrideBoost)
	E(ExpertiseBonusBoost)
	E(EntityThrowDamageBoost)
	E(WeaponDamageTypeOverrideBoost)
	E(MaximizeHealingBoost)
	E(DamageBonusBoost)
	E(AdvanceSpellsBoost)
	E(SpellResistanceBoost)
	E(WeaponAttackRollBonusBoost)
	E(SpellSaveDCBoost)
	E(RedirectDamageBoost)
	E(CanSeeThroughBoost)
	E(CanShootThroughBoost)
	E(CanWalkThroughBoost)
	E(MonkWeaponDamageDiceOverrideBoost)
	E(HorizontalFOVOverrideBoost)
	E(CharacterUnarmedDamageBoost)
	E(ActionResourceReplenishTypeOverrideBoost)
	E(ActionResourcePreventReductionBoost)
	E(AttackSpellOverrideBoost)
	E(LockBoost)
	E(IgnorePointBlankDisadvantageBoost)
	E(CriticalHitExtraDiceBoost)
	E(DodgeAttackRollBoost)
	E(GameplayObscurityBoost)
	E(MaximumRollResultBoost)
	E(UnlockInterruptBoost)
	E(JumpMaxDistanceBonusBoost)
	E(ArmorAbilityModifierCapOverrideBoost)
	E(IgnoreResistanceBoost)
	E(ConcentrationIgnoreDamageBoost)
	E(IgnoreLowGroundPenaltyBoost)
	E(IgnoreSurfaceCoverBoost)

	E(Uuid)

	// Special engine components
	E(UuidToHandleMapping)

	E(Max)
END_ENUM()

BEGIN_ENUM(ExtQueryType, uint32_t)
	E(UuidToHandleMapping)
	E(Max)
END_ENUM()

BEGIN_ENUM_NS(ecl, GameState, ClientGameState, uint32_t)
	EV(Unknown, 0)
	E(Init)
	E(InitMenu)
	E(InitNetwork)
	E(InitConnection)
	E(Idle)
	E(LoadMenu)
	E(Menu)
	E(Exit)
	E(SwapLevel)
	EV(LoadLevel, 10)
	E(LoadModule)
	E(LoadSession)
	E(UnloadLevel)
	E(UnloadModule)
	E(UnloadSession)
	E(Paused)
	E(PrepareRunning)
	E(Running)
	E(Disconnect)
	EV(Join, 20)
	E(Save)
	E(StartLoading)
	E(StopLoading)
	E(StartServer)
	E(Movie)
	E(Installation)
	E(ModReceiving)
	E(Lobby)
	E(BuildStory)
	EV(GeneratePsoCache, 32)
	E(LoadPsoCache)
	E(AnalyticsSessionEnd)
END_ENUM_NS()


BEGIN_ENUM_NS(esv, GameState, ServerGameState, uint32_t)
	EV(Unknown, 0)
	E(Uninitialized)
	E(Init)
	E(Idle)
	E(Exit)
	E(LoadLevel)
	E(LoadModule)
	E(LoadSession)
	E(UnloadLevel)
	E(UnloadModule)
	EV(UnloadSession, 10)
	E(Sync)
	E(Paused)
	E(Running)
	E(Save)
	E(Disconnect)
	E(BuildStory)
	E(ReloadStory)
END_ENUM_NS()


BEGIN_ENUM(NetMessage, uint32_t)
	EV(NETMSG_HANDSHAKE, 1)
	EV(NETMSG_HOST_WELCOME, 2)
	EV(NETMSG_HOST_REFUSE, 3)
	EV(NETMSG_HOST_REFUSEPLAYER, 4)
	EV(NETMSG_CLIENT_JOINED, 8)
	EV(NETMSG_CLIENT_LEFT, 9)
	EV(NETMSG_HOST_LEFT, 5)
	EV(NETMSG_CLIENT_CONNECT, 6)
	EV(NETMSG_CLIENT_ACCEPT, 7)
	EV(NETMSG_PLAYER_CONNECT, 10)
	EV(NETMSG_PLAYER_DISCONNECT, 11)
	EV(NETMSG_PLAYER_JOINED, 13)
	EV(NETMSG_PLAYER_ACCEPT, 12)
	EV(NETMSG_PLAYER_LEFT, 14)
	EV(NETMSG_PLAYER_CHANGENAME, 15)
	EV(NETMSG_PLAYER_NAMECHANGED, 16)
	EV(NETMSG_ECS_REPLICATION, 17)
	EV(NETMSG_VOICEDATA, 18)
	EV(NETMSG_MIC_DISABLED, 20)
	EV(NETMSG_SKIPMOVIE_RESULT, 19)
	EV(NETMSG_CHAT, 185)
	EV(NETMSG_PEER_ACTIVATE, 118)
	EV(NETMSG_PEER_DEACTIVATE, 119)
	EV(NETMSG_MODULE_LOAD, 192)
	EV(NETMSG_MODULE_LOADED, 193)
	EV(NETMSG_SESSION_LOAD, 194)
	EV(NETMSG_SESSION_LOADED, 195)
	EV(NETMSG_SESSION_UNLOADED, 196)
	EV(NETMSG_LEVEL_LOAD, 197)
	EV(NETMSG_LEVEL_CREATED, 198)
	EV(NETMSG_LEVEL_LOADED, 199)
	EV(NETMSG_LOAD_START, 200)
	EV(NETMSG_LOAD_STARTED, 201)
	EV(NETMSG_LEVEL_INSTANTIATE_SWAP, 202)
	EV(NETMSG_LEVEL_SWAP_READY, 203)
	EV(NETMSG_LEVEL_SWAP_COMPLETE, 204)
	EV(NETMSG_LEVEL_START, 205)
	EV(NETMSG_CHARACTER_CREATE, 26)
	EV(NETMSG_CHARACTER_DESTROY, 27)
	EV(NETMSG_CHARACTER_CONFIRMATION, 28)
	EV(NETMSG_CHARACTER_ACTIVATE, 29)
	EV(NETMSG_CHARACTER_DEACTIVATE, 30)
	EV(NETMSG_CHARACTER_ASSIGN, 31)
	EV(NETMSG_CHARACTER_CHANGE_OWNERSHIP, 207)
	EV(NETMSG_CHARACTER_STEERING, 32)
	EV(NETMSG_CHARACTER_MOVEMENT_FALLING, 237)
	EV(NETMSG_CHARACTER_ACTION, 33)
	EV(NETMSG_CHARACTER_ACTION_DATA, 34)
	EV(NETMSG_CHARACTER_ACTION_REQUEST_RESULT, 35)
	EV(NETMSG_CHARACTER_STATUS, 36)
	EV(NETMSG_CHARACTER_STATUS_LIFETIME, 37)
	EV(NETMSG_CHARACTER_DIALOG, 40)
	EV(NETMSG_CHARACTER_USE_MOVEMENT, 43)
	EV(NETMSG_CHARACTER_MOVE_FAILED, 44)
	EV(NETMSG_CHARACTER_SELECTED_CLIMB_ON, 45)
	EV(NETMSG_FOLLOWER_CANT_USE_ITEM, 46)
	EV(NETMSG_CHARACTER_AOO, 47)
	EV(NETMSG_CHARACTER_UPDATE, 38)
	EV(NETMSG_CHARACTER_CONTROL, 39)
	EV(NETMSG_CHARACTER_TRANSFORM, 48)
	EV(NETMSG_CHARACTER_PICKPOCKET, 50)
	EV(NETMSG_CHARACTER_OFFSTAGE, 51)
	EV(NETMSG_CHARACTER_IN_DIALOG, 54)
	EV(NETMSG_CHARACTER_LOOT, 52)
	EV(NETMSG_CHARACTER_ITEM_USED, 53)
	EV(NETMSG_CHARACTER_UNSHEATHING, 41)
	EV(NETMSG_CHARACTER_END_REPOSE, 42)
	EV(NETMSG_CHARACTER_BEHAVIOR, 55)
	EV(NETMSG_PARTYGROUP, 60)
	EV(NETMSG_PARTYORDER, 61)
	EV(NETMSG_PARTY_BLOCKFOLLOW, 64)
	EV(NETMSG_PROJECTILE_CREATE, 92)
	EV(NETMSG_PROJECTILE_UPDATE, 93)
	EV(NETMSG_MULTIPLE_TARGET_OPERATION, 257)
	EV(NETMSG_TURNBASED_FINISHTEAM, 98)
	EV(NETMSG_TURNBASED_SETTEAM, 99)
	EV(NETMSG_TURNBASED_FLEECOMBATRESULT, 100)
	EV(NETMSG_TURNBASED_FLEE_REQUEST, 101)
	EV(NETMSG_TURNBASED_ENDTURN_REQUEST, 102)
	EV(NETMSG_TURNBASED_CANCEL_ENDTURN_REQUEST, 103)
	EV(NETMSG_TURNBASED_BEGIN_CANCEL_ENDTURN_REQUEST, 104)
	EV(NETMSG_TURNBASED_END_CANCEL_ENDTURN_REQUEST, 105)
	EV(NETMSG_TURNBASED_STARTTURN_CONFIRMATION, 106)
	EV(NETMSG_TURNBASED_SKIP_START_DELAY, 107)
	EV(NETMSG_UI_FORCETURNBASED_ENTERED, 108)
	EV(NETMSG_UI_FORCETURNBASED_LEFT, 109)
	EV(NETMSG_UI_FORCETURNBASED_TURN_STARTED, 110)
	EV(NETMSG_UI_FORCETURNBASED_TURN_ENDED, 111)
	EV(NETMSG_ITEM_CREATE, 67)
	EV(NETMSG_ITEM_DESTROY, 68)
	EV(NETMSG_ITEM_ACTIVATE, 69)
	EV(NETMSG_ITEM_DEACTIVATE, 70)
	EV(NETMSG_ITEM_DESTINATION, 71)
	EV(NETMSG_ITEM_UPDATE, 72)
	EV(NETMSG_ITEM_USE_REMOTELY, 73)
	EV(NETMSG_ITEM_MOVE_TO_WORLD, 74)
	EV(NETMSG_ITEM_ACTION, 75)
	EV(NETMSG_ITEM_STATUS, 76)
	EV(NETMSG_ITEM_STATUS_LIFETIME, 77)
	EV(NETMSG_ITEM_TRANSFORM, 78)
	EV(NETMSG_ITEM_CONFIRMATION, 79)
	EV(NETMSG_ITEM_OFFSTAGE, 80)
	EV(NETMSG_ITEM_MOVED_INFORM, 81)
	EV(NETMSG_INVENTORY_CREATE, 82)
	EV(NETMSG_INVENTORY_CREATE_AND_OPEN, 83)
	EV(NETMSG_INVENTORY_DESTROY, 84)
	EV(NETMSG_INVENTORY_VIEW_CREATE, 85)
	EV(NETMSG_INVENTORY_VIEW_DESTROY, 86)
	EV(NETMSG_INVENTORY_VIEW_UPDATE_ITEMS, 87)
	EV(NETMSG_INVENTORY_VIEW_UPDATE_PARENTS, 88)
	EV(NETMSG_INVENTORY_VIEW_SORT, 89)
	EV(NETMSG_INVENTORY_ITEM_UPDATE, 90)
	EV(NETMSG_INVENTORY_LOCKSTATE_SYNC, 91)
	EV(NETMSG_SURFACE_CREATE, 22)
	EV(NETMSG_SURFACE_META, 23)
	EV(NETMSG_DARKNESSTILE_UPDATE, 24)
	EV(NETMSG_GAMEACTION, 25)
	EV(NETMSG_GAMEOVER, 161)
	EV(NETMSG_ACT_OVER, 162)
	EV(NETMSG_SPELL_LEARN, 120)
	EV(NETMSG_SPELL_REMOVE_LEARNED, 121)
	EV(NETMSG_SPELL_PREPARE, 122)
	EV(NETMSG_SPELL_CANCEL, 123)
	EV(NETMSG_TADPOLE_POWER_ADD, 124)
	EV(NETMSG_TADPOLE_POWERS_REMOVE, 125)
	EV(NETMSG_GAMECONTROL_UPDATE_S2C, 129)
	EV(NETMSG_GAMECONTROL_UPDATE_C2S, 130)
	EV(NETMSG_GAMECONTROL_PRICETAG, 131)
	EV(NETMSG_CHANGE_RULESETS, 206)
	EV(NETMSG_REALTIME_MULTIPLAY, 226)
	EV(NETMSG_CHARACTER_ERROR, 133)
	EV(NETMSG_SHOW_ERROR, 254)
	EV(NETMSG_REQUESTAUTOSAVE, 188)
	EV(NETMSG_SAVEGAME, 189)
	EV(NETMSG_SAVEGAMEHANDSHAKE, 190)
	EV(NETMSG_SAVEGAMEHANDSHAKE_SCREENSHOT, 191)
	EV(NETMSG_EFFECT_CREATE, 126)
	EV(NETMSG_EFFECT_FORGET, 127)
	EV(NETMSG_EFFECT_DESTROY, 128)
	EV(NETMSG_CACHETEMPLATE, 134)
	EV(NETMSG_OVERHEADTEXT, 135)
	EV(NETMSG_COMBATLOG, 136)
	EV(NETMSG_COMBATLOGITEMINTERACTION, 137)
	EV(NETMSG_COMBATLOGENTRIES, 138)
	EV(NETMSG_SHOW_ENTER_REGION_UI_MESSAGE, 146)
	EV(NETMSG_CHARACTER_TELEPORT, 49)
	EV(NETMSG_SCREEN_FADE_FINISHED, 139)
	EV(NETMSG_OPEN_CUSTOM_BOOK_UI_MESSAGE, 140)
	EV(NETMSG_CLOSE_CUSTOM_BOOK_UI_MESSAGE, 141)
	EV(NETMSG_OPEN_MESSAGE_BOX_MESSAGE, 142)
	EV(NETMSG_CLOSED_MESSAGE_BOX_MESSAGE, 143)
	EV(NETMSG_OPEN_WAYPOINT_UI_MESSAGE, 144)
	EV(NETMSG_CLOSE_UI_MESSAGE, 145)
	EV(NETMSG_OPEN_CRAFT_UI_MESSAGE, 214)
	EV(NETMSG_JOURNAL_RESET, 147)
	EV(NETMSG_TELEPORT_WAYPOINT, 221)
	EV(NETMSG_QUEST_STEP, 148)
	EV(NETMSG_QUEST_CATEGORY_UPDATE, 149)
	EV(NETMSG_QUEST_PROGRESS, 150)
	EV(NETMSG_QUESTS_LOADED, 151)
	EV(NETMSG_JOURNALRECIPE_UPDATE, 153)
	EV(NETMSG_TROPHY_UPDATE, 152)
	EV(NETMSG_MARKER_UI_UPDATE, 155)
	EV(NETMSG_MARKER_UI_CREATE, 154)
	EV(NETMSG_QUEST_TRACK, 156)
	EV(NETMSG_JOURNALDIALOGLOG_UPDATE, 208)
	EV(NETMSG_UI_QUESTSELECTED, 157)
	EV(NETMSG_MYSTERY_ADVANCED, 158)
	EV(NETMSG_MYSTERY_DISABLED, 159)
	EV(NETMSG_NOTIFICATION, 160)
	EV(NETMSG_REGISTER_WAYPOINT, 163)
	EV(NETMSG_UNLOCK_WAYPOINT, 216)
	EV(NETMSG_LOCK_WAYPOINT, 218)
	EV(NETMSG_FLAG_UPDATE, 164)
	EV(NETMSG_LIGHTING_OVERRIDE, 183)
	EV(NETMSG_ATMOSPHERE_OVERRIDE, 184)
	EV(NETMSG_CAMERA_ACTIVATE, 180)
	EV(NETMSG_CAMERA_ROTATE, 181)
	EV(NETMSG_CAMERA_TARGET, 182)
	EV(NETMSG_SHROUD_UPDATE, 65)
	EV(NETMSG_PLAYMOVIE, 132)
	EV(NETMSG_TRADE_ACTION, 179)
	EV(NETMSG_ACHIEVEMENT_UNLOCKED_MESSAGE, 209)
	EV(NETMSG_SAVEGAME_LOAD_FAIL, 210)
	EV(NETMSG_SERVER_COMMAND, 211)
	EV(NETMSG_SERVER_NOTIFICATION, 212)
	EV(NETMSG_GAMETIME_SYNC, 186)
	EV(NETMSG_STORY_ELEMENT_UI, 213)
	EV(NETMSG_ACHIEVEMENT_PROGRESS_MESSAGE, 215)
	EV(NETMSG_TELEPORT_ACK, 234)
	EV(NETMSG_COMBINE_RESULT, 219)
	EV(NETMSG_UNLOCK_ITEM, 220)
	EV(NETMSG_DIALOG_STATE_MESSAGE, 168)
	EV(NETMSG_DIALOG_NODE_MESSAGE, 169)
	EV(NETMSG_DIALOG_ANSWER_MESSAGE, 170)
	EV(NETMSG_DIALOG_ANSWER_HIGHLIGHT_MESSAGE, 171)
	EV(NETMSG_DIALOG_HISTORY_MESSAGE, 172)
	EV(NETMSG_DIALOG_LISTEN, 227)
	EV(NETMSG_DIALOG_ACTORJOINS_MESSAGE, 173)
	EV(NETMSG_DIALOG_ACTORLEAVES_MESSAGE, 174)
	EV(NETMSG_DIALOG_REPLACESPEAKER_MESSAGE, 175)
	EV(NETMSG_DIALOG_INVALID_ANSWER, 228)
	EV(NETMSG_DIALOG_SUGGESTANSWER_MESSAGE, 176)
	EV(NETMSG_DIALOG_REQUEST_IN_DIALOGUE_ATTACK_MESSAGE, 177)
	EV(NETMSG_DIALOG_TIMELINE_UNLOADED_MESSAGE, 178)
	EV(NETMSG_DIALOG_INSTANCEDIALOGCHANGED, 330)
	EV(NETMSG_LOBBY_DATAUPDATE, 231)
	EV(NETMSG_LOBBY_USERUPDATE, 232)
	EV(NETMSG_LOBBY_STARTGAME, 233)
	EV(NETMSG_CAMERA_SPLINE, 236)
	EV(NETMSG_NET_ENTITY_CREATE, 116)
	EV(NETMSG_NET_ENTITY_DESTROY, 117)
	EV(NETMSG_MUSIC_EVENT, 230)
	EV(NETMSG_MUSIC_STATE, 229)
	EV(NETMSG_PAUSE, 239)
	EV(NETMSG_UNPAUSE, 240)
	EV(NETMSG_READYCHECK, 238)
	EV(NETMSG_DIPLOMACY, 241)
	EV(NETMSG_TRIGGER_CREATE, 242)
	EV(NETMSG_TRIGGER_DESTROY, 243)
	EV(NETMSG_TRIGGER_UPDATE, 244)
	EV(NETMSG_PING_REQUEST, 245)
	EV(NETMSG_CUSTOM_STATS_DEFINITION_CREATE, 246)
	EV(NETMSG_CUSTOM_STATS_DEFINITION_REMOVE, 247)
	EV(NETMSG_CUSTOM_STATS_DEFINITION_UPDATE, 248)
	EV(NETMSG_CUSTOM_STATS_CREATE, 249)
	EV(NETMSG_CUSTOM_STATS_UPDATE, 250)
	EV(NETMSG_GIVE_REWARD, 251)
	EV(NETMSG_LOAD_GAME_WITH_ADDONS, 252)
	EV(NETMSG_LOAD_GAME_WITH_ADDONS_FAIL, 253)
	EV(NETMSG_CLIENT_GAME_SETTINGS, 255)
	EV(NETMSG_DLC_UPDATE, 258)
	EV(NETMSG_TIMELINE_HANDSHAKE, 259)
	EV(NETMSG_TIMELINE_ACTOR_HANDSHAKE, 260)
	EV(NETMSG_TIMELINE_NODECOMPLETED, 261)
	EV(NETMSG_TIMELINE_PLAYER_WATCHING, 262)
	EV(NETMSG_TIMELINE_REQUEST_FASTFORWARD, 263)
	EV(NETMSG_TIMELINE_WORLD_CINEMATIC_COMPLETED, 264)
	EV(NETMSG_CLIENT_DIALOG_PRIVACY_CHANGED, 340)
	EV(NETMSG_CLIENT_DIALOG_JOIN_PRIVACY_FAILED, 341)
	EV(NETMSG_FORCE_TURN_BASED_END_PLAYER_TURN_REQUEST, 265)
	EV(NETMSG_FORCE_TURN_BASED_TOGGLE_REQUEST, 266)
	EV(NETMSG_CHARACTER_REQUEST_WEAPON_SET_SWITCH, 270)
	EV(NETMSG_CHARACTER_REQUEST_ARMOR_SET_SWITCH, 271)
	EV(NETMSG_REQUESTED_ROLL, 267)
	EV(NETMSG_PASSIVE_ROLL_SEQUENCE, 268)
	EV(NETMSG_CHARACTER_PATHING, 269)
	EV(NETMSG_CHARACTER_CREATION_ABORT, 272)
	EV(NETMSG_CHARACTER_CREATION_READY, 273)
	EV(NETMSG_CHARACTER_CREATION_UPDATE, 274)
	EV(NETMSG_CHARACTER_CREATION_PLAYORIGINTIMELINE, 275)
	EV(NETMSG_LEVEL_UP_UPDATE, 276)
	EV(NETMSG_RESPEC_UPDATE, 277)
	EV(NETMSG_FULL_RESPEC_UPDATE, 278)
	EV(NETMSG_CHARACTER_CREATION_LEVELUP, 279)
	EV(NETMSG_CHARACTER_CREATION_RESPEC, 280)
	EV(NETMSG_UI_INTERACTION_STOPPED, 282)
	EV(NETMSG_PASSIVE_TOGGLE, 288)
	EV(NETMSG_DUALWIELDING_TOGGLE, 289)
	EV(NETMSG_UI_COMBINE_OPEN, 281)
	EV(NETMSG_TUTORIAL_CLOSED, 283)
	EV(NETMSG_TUTORIAL_UI_EVENT, 284)
	EV(NETMSG_TUTORIAL_USER_ACTION, 285)
	EV(NETMSG_TUTORIALS_SHOWING, 286)
	EV(NETMSG_TUTORIALS_RESET, 287)
	EV(NETMSG_SNEAKING_CONES_VISIBLE_TOGGLE, 290)
	EV(NETMSG_HOTBAR_SLOT_SET, 291)
	EV(NETMSG_HOTBAR_SLOT_REMOVE_IS_NEW_FLAG, 292)
	EV(NETMSG_HOTBAR_COLUMN_SET, 293)
	EV(NETMSG_HOTBAR_ROWS_SET, 294)
	EV(NETMSG_HOTBAR_ROW_REMOVE, 295)
	EV(NETMSG_HOTBAR_LOCK_SET, 296)
	EV(NETMSG_HOTBAR_CUSTOM_DECK, 297)
	EV(NETMSG_HOTBAR_CURRENT_DECK_SET, 298)
	EV(NETMSG_PARTY_PRESET_SAVE, 299)
	EV(NETMSG_PARTY_PRESET_LOAD, 300)
	EV(NETMSG_PARTY_PRESET_LEVELUP, 301)
	EV(NETMSG_PARTY_PRESET_SPELL, 302)
	EV(NETMSG_STORY_FLAGS_LOAD, 303)
	EV(NETMSG_ACTIVE_ROLL_MODIFIERS, 307)
	EV(NETMSG_CAST_ALL, 223)
	EV(NETMSG_END_THE_DAY, 224)
	EV(NETMSG_ITEM_TOGGLE_IS_WARE, 304)
	EV(NETMSG_LONG_REST_DECISION, 225)
	EV(NETMSG_REQUEST_RELEASE_CONCENTRATION, 306)
	EV(NETMSG_ROLL_STREAM_ROLL_MODE_TYPE, 305)
	EV(NETMSG_SHORT_REST, 222)
	EV(NETMSG_CHARACTER_DROP_ENTITY, 308)
	EV(NETMSG_CHARACTER_CANCEL_DROP_ENTITY, 309)
	EV(NETMSG_CHARACTER_LOCKPICK, 310)
	EV(NETMSG_CHARACTER_TRAPDISARM, 311)
	EV(NETMSG_CHARACTER_IMPROV_WEAPON, 312)
	EV(NETMSG_CHARACTER_STOWED_VISIBILITY, 313)
	EV(NETMSG_DECLUTTERED_ITEMS, 314)
	EV(NETMSG_SPELL_CAST_START_PREVIEW, 315)
	EV(NETMSG_SPELL_CAST_UPDATE_PREVIEW, 316)
	EV(NETMSG_SPELL_CAST_CONFIRM, 317)
	EV(NETMSG_SPELL_CAST_CANCEL, 318)
	EV(NETMSG_SPELL_CAST_CAST, 319)
	EV(NETMSG_USE_ITEM_ACTION, 320)
	EV(NETMSG_INVENTORY_CREATE_NEW, 321)
	EV(NETMSG_INVENTORY_DESTROY_NEW, 322)
	EV(NETMSG_INVENTORY_ADD, 323)
	EV(NETMSG_INVENTORY_MOVETOSLOT, 324)
	EV(NETMSG_INVENTORY_TRANSFER, 325)
	EV(NETMSG_INVENTORY_SORT, 326)
	EV(NETMSG_INVENTORY_EQUIP, 327)
	EV(NETMSG_INVENTORY_UNEQUIP, 328)
	EV(NETMSG_INVENTORY_LOCK, 329)
	EV(NETMSG_CHARACTER_ORIGINAL_TEMPLATE_UPDATE, 331)
	EV(NETMSG_INTERRUPT_DECISION, 332)
	EV(NETMSG_INTERRUPT_SET_ASK_DATA, 333)
	EV(NETMSG_INTERRUPT_SET_ENABLED_DATA, 334)
	EV(NETMSG_SELECT_DICE, 335)
	EV(NETMSG_CAMERA_ARRIVED, 336)
	EV(NETMSG_CLEAR_RECIPE_NEW_FLAG, 337)
	EV(NETMSG_COMBINE_ITEMS, 338)
	EV(NETMSG_NEW_ITEMS_INSIDE, 339)

	EV(NETMSG_SCRIPT_EXTENDER, 400)
END_ENUM()

BEGIN_ENUM(FunctorExecParamsType, uint32_t)
	EV(Type1, 1)
	EV(Type2, 2)
	EV(Type3, 3)
	EV(Type4, 4)
	EV(Type5, 5)
	EV(Type6, 6)
	EV(Type7, 7)
	EV(Type8, 8)
END_ENUM()

BEGIN_ENUM_NS(stats, FunctorId, StatsFunctorId, uint8_t)
	E(CustomDescription)
	E(ApplyStatus)
	E(SurfaceChange)
	E(Resurrect)
	E(Sabotage)
	E(Summon)
	E(Force)
	E(Douse)
	E(SwapPlaces)
	E(Pickup)
	E(CreateSurface)
	E(CreateConeSurface)
	E(RemoveStatus)
	E(DealDamage)
	E(ExecuteWeaponFunctors)
	E(RegainHitPoints)
	E(TeleportSource)
	E(SetStatusDuration)
	E(UseSpell)
	E(UseActionResource)
	E(UseAttack)
	E(CreateExplosion)
	E(BreakConcentration)
	E(ApplyEquipmentStatus)
	E(RestoreResource)
	E(Spawn)
	E(Stabilize)
	E(Unlock)
	E(ResetCombatTurn)
	E(RemoveAuraByChildStatus)
	E(SummonInInventory)
	E(SpawnInInventory)
	E(RemoveUniqueStatus)
	E(DisarmWeapon)
	E(DisarmAndStealWeapon)
	E(SwitchDeathType)
	E(TriggerRandomCast)
	E(GainTemporaryHitPoints)
	E(FireProjectile)
	E(ShortRest)
	E(CreateZone)
	E(DoTeleport)
	E(RegainTemporaryHitPoints)
	E(RemoveStatusByLevel)
	E(SurfaceClearLayer)
	E(Unsummon)
	E(CreateWall)
	E(Counterspell)
	E(AdjustRoll)
	E(SpawnExtraProjectiles)
	E(Kill)
	E(TutorialEvent)
	E(Drop)
	E(ResetCooldowns)
	E(SetRoll)
	E(SetDamageResistance)
	E(SetReroll)
	E(SetAdvantage)
	E(SetDisadvantage)
	E(MaximizeRoll)
	E(CameraWait)
	EV(Extender, 127)
END_ENUM_NS()

BEGIN_BITMASK(ConditionRollType, uint8_t)
	EV(DifficultyRoll, 1)
	EV(AttackRoll, 2)
	EV(SavingThrowRoll, 4)
	EV(SkillCheckRoll, 8)
	EV(AbilityCheckRoll, 0x10)
END_ENUM()

BEGIN_ENUM(RollCritical, uint8_t)
	EV(None, 0)
	EV(Success, 1)
	EV(Fail, 2)
END_ENUM()

BEGIN_ENUM_NS(stats, UnsheathState, StatsUnsheathState, uint32_t)
	EV(Instrument, 0)
	EV(Melee, 1)
	EV(Ranged, 2)
	EV(Sheathed, 3)
END_ENUM_NS()

BEGIN_ENUM_NS(stats, RollType, StatsRollType, uint8_t)
	EV(None, 0)
	EV(Attack, 1)
	EV(MeleeWeaponAttack, 2)
	EV(RangedWeaponAttack, 3)
	EV(MeleeSpellAttack, 4)
	EV(RangedSpellAttack, 5)
	EV(MeleeUnarmedAttack, 6)
	EV(RangedUnarmedAttack, 7)
	EV(SkillCheck, 8)
	EV(SavingThrow, 9)
	EV(RawAbility, 10)
	EV(Damage, 11)
	EV(MeleeOffHandWeaponAttack, 12)
	EV(RangedOffHandWeaponAttack, 13)
	EV(DeathSavingThrow, 14)
	EV(MeleeWeaponDamage, 15)
	EV(RangedWeaponDamage, 16)
	EV(MeleeSpellDamage, 17)
	EV(RangedSpellDamage, 18)
	EV(MeleeUnarmedDamage, 19)
	EV(RangedUnarmedDamage, 20)
	EV(Sentinel, 21)
END_ENUM_NS()

BEGIN_ENUM_NS(stats, RollAdjustmentType, StatsRollAdjustmentType, uint8_t)
	EV(All, 0)
	EV(Distribute, 1)
END_ENUM_NS()

BEGIN_BITMASK_NS(stats, PropertyContext, StatsPropertyContext, uint64_t)
	EV(TARGET, 1)
	EV(AOE, 2)
	EV(CAST, 4)
	EV(EQUIP, 8)
	EV(GROUND, 16)
	EV(LEAVE_ATTACK_RANGE, 32)
	EV(ATTACKED_IN_MELEE_RANGE, 64)
	EV(ATTACKING_IN_MELEE_RANGE, 128)
	EV(PROFICIENCY_CHANGED, 256)
	EV(STATUS_APPLY, 512)
	EV(STATUS_APPLIED, 1024)
	EV(STATUS_REMOVE, 2048)
	EV(MOVED_DISTANCE, 4096)
	EV(AI_ONLY, 0x2000)
	EV(AI_IGNORE, 0x4000)
	EV(ATTACK, 0x8000)
	EV(ATTACKED, 0x10000)
	EV(DAMAGE, 0x20000)
	EV(HEAL, 0x40000)
	EV(STATUS_REMOVED, 0x80000)
	EV(OBSCURITY_CHANGED, 0x100000)
	EV(SHORT_REST, 0x200000)
	EV(DAMAGED, 0x400000)
	EV(HEALED, 0x800000)
	EV(ABILITY_CHECK, 0x1000000)
	EV(CAST_RESOLVED, 0x2000000)
	EV(LONG_REST, 0x4000000)
	EV(CREATE, 0x8000000)
	EV(PUSH, 0x10000000)
	EV(PUSHED, 0x20000000)
	EV(INVENTORY_CHANGED, 0x40000000)
	EV(ENTER_ATTACK_RANGE, 0x80000000)
	EV(PROJECTILE, 0x100000000)
	EV(COMBAT_ENDED, 0x200000000)
	EV(TURN, 0x400000000)
	EV(ACTION_RESOURCES_CHANGED, 0x800000000)
	EV(SURFACE_ENTER, 0x1000000000)
	EV(LOCKPICKING_SUCCEEDED, 0x2000000000)
	EV(INTERRUPT_USED, 0x4000000000)
	EV(DAMAGE_PREVENTED, 0x8000000000)
	EV(DAMAGED_PREVENTED, 0x10000000000)
END_ENUM_NS()

BEGIN_ENUM_NS(stats, ObserverType, StatsObserverType, uint8_t)
	EV(None, 0)
	EV(Observer, 0x1)
	EV(Target, 0x2)
	EV(Source, 0x3)
END_ENUM_NS()

BEGIN_BITMASK_NS(stats, FunctorFlags, StatsFunctorFlags, uint8_t)
	EV(Self, 0x1)
	EV(Owner, 0x2)
	EV(Swap, 0x4)
END_ENUM_NS()

BEGIN_BITMASK(StatAttributeFlags, uint64_t)
	EV(SlippingImmunity, 0x1)
	EV(Torch, 0x2)
	EV(Arrow, 0x4)
	EV(Unbreakable, 0x8)
	EV(Unrepairable, 0x10)
	EV(Unstorable, 0x20)
	EV(Grounded, 0x40)
	EV(Floating, 0x80)
	EV(EMPTY, 0x100)
	EV(IgnoreClouds, 0x200)
	EV(LootableWhenEquipped, 0x400)
	EV(PickpocketableWhenEquipped, 0x800)
	EV(LoseDurabilityOnCharacterHit, 0x1000)
	EV(ThrownImmunity, 0x2000)
	EV(InvisibilityImmunity, 0x4000)
	EV(InvulnerableAndInteractive, 0x8000)
	EV(Backstab, 0x10000)
	EV(BackstabImmunity, 0x20000)
	EV(EnableObscurityEvents, 0x40000)
	EV(ObscurityWithoutSneaking, 0x80000)
	EV(FloatingWhileMoving, 0x100000)
END_ENUM()

BEGIN_BITMASK(CombatParticipantFlags, uint32_t)
	EV(CanFight, 1)
	EV(CanJoinCombat, 2)
	EV(IsBoss, 4)
	EV(IsInspector, 0x10)
	EV(StayInAiHints, 0x200)
END_ENUM()

BEGIN_ENUM(RequirementType, uint32_t)
	EV(None, 0)
	EV(Level, 1)
	EV(Strength, 2)
	EV(Dexterity, 3)
	EV(Intelligence, 4)
	EV(Constitution, 5)
	EV(Wisdom, 6)
	EV(PainReflection, 8)
	EV(Ranged, 9)
	EV(Reflexes, 10)
	EV(Vitality, 11)
	EV(Sourcery, 12)
	EV(Telekinesis, 13)
	EV(Necromancy, 15)
	EV(Summoning, 16)
	EV(Sneaking, 17)
	EV(Pickpocket, 18)
	EV(Loremaster, 19)
	EV(Barter, 20)
	EV(Charm, 21)
	EV(Intimidate, 22)
	EV(Reason, 23)
	EV(Persuasion, 24)
	EV(Combat, 25)
	EV(TurnBased, 26)
	EV(Immobile, 27)
	EV(Tag, 28)
END_ENUM()

BEGIN_ENUM(StatsExpressionParamType2, uint8_t)
	EV(StatsExpressionVariableData, 0)
	EV(Ability, 0)
	EV(Skill, 1)
	EV(StatusGroup, 2)
	EV(STDString, 3)
END_ENUM()

BEGIN_ENUM(StatsExpressionParamType, uint8_t)
	EV(StatsExpressionType, 0)
	EV(Type1, 1)
	EV(StatsExpressionVariableDataType, 2)
	EV(StatsExpressionVariableDataModifier, 3)
	EV(RollDefinition, 4)
	EV(ResourceRollDefinition, 5)
	EV(StatsContextType, 6)
	EV(Int, 7)
	EV(Bool, 8)
END_ENUM()

BEGIN_ENUM(AbilityId, uint8_t)
	EV(None, 0)
	EV(Strength, 1)
	EV(Dexterity, 2)
	EV(Constitution, 3)
	EV(Intelligence, 4)
	EV(Wisdom, 5)
	EV(Charisma, 6)
	EV(Sentinel, 7)
END_ENUM()

BEGIN_ENUM(AttackRoll, uint8_t)
	EV(None, 0)
	EV(Strength, 1)
	EV(Dexterity, 2)
	EV(Constitution, 3)
	EV(Intelligence, 4)
	EV(Wisdom, 5)
	EV(Charisma, 6)
	EV(SpellCastingAbility, 7)
	EV(UnarmedAttackAbility, 8)
	EV(WeaponAttackAbility, 9)
END_ENUM()

BEGIN_ENUM(HealDirection, uint8_t)
	EV(Incoming, 0)
	EV(Outgoing, 1)
END_ENUM()

BEGIN_ENUM(SkillId, uint8_t)
	EV(Deception, 0)
	EV(Intimidation, 1)
	EV(Performance, 2)
	EV(Persuasion, 3)
	EV(Acrobatics, 4)
	EV(SleightOfHand, 5)
	EV(Stealth, 6)
	EV(Arcana, 7)
	EV(History, 8)
	EV(Investigation, 9)
	EV(Nature, 10)
	EV(Religion, 11)
	EV(Athletics, 12)
	EV(AnimalHandling, 13)
	EV(Insight, 14)
	EV(Medicine, 15)
	EV(Perception, 16)
	EV(Survival, 17)
	EV(Invalid, 18)
	EV(Sentinel, 19)
END_ENUM()

BEGIN_ENUM(SpellAttackType, uint8_t)
	EV(None, 0)
	EV(DirectHit, 1)
	EV(MeleeWeaponAttack, 2)
	EV(RangedWeaponAttack, 3)
	EV(MeleeOffHandWeaponAttack, 4)
	EV(RangedOffHandWeaponAttack, 5)
	EV(MeleeSpellAttack, 6)
	EV(RangedSpellAttack, 7)
	EV(MeleeUnarmedAttack, 8)
	EV(RangedUnarmedAttack, 9)
END_ENUM()

BEGIN_BITMASK(WeaponFlags, uint32_t)
	EV(Light, 1)
	EV(Ammunition, 2)
	EV(Finesse, 4)
	EV(Heavy, 8)
	EV(Loading, 0x10)
	EV(Range, 0x20)
	EV(Reach, 0x40)
	EV(Lance, 0x80)
	EV(Net, 0x100)
	EV(Thrown, 0x200)
	EV(Twohanded, 0x400)
	EV(Versatile, 0x800)
	EV(Melee, 0x1000)
	EV(Dippable, 0x2000)
	EV(Torch, 0x4000)
	EV(NoDualWield, 0x8000)
	EV(Magical, 0x10000)
	EV(NeedDualWieldingBoost, 0x20000)
	EV(NotSheathable, 0x40000)
	EV(Unstowable, 0x80000)
	EV(AddToHotbar, 0x100000)
END_ENUM()

BEGIN_ENUM(SpellSchoolId, uint8_t)
	EV(None, 0)
	EV(Abjuration, 1)
	EV(Conjuration, 2)
	EV(Divination, 3)
	EV(Enchantment, 4)
	EV(Evocation, 5)
	EV(Illusion, 6)
	EV(Necromancy, 7)
	EV(Transmutation, 8)
END_ENUM()

BEGIN_BITMASK(ProjectileTypeIds, uint8_t)
	EV(Physical, 1)
	EV(Magical, 2)
END_ENUM()

BEGIN_ENUM(AdvantageTypeId, uint32_t)
	EV(AttackRoll, 0)
	EV(AttackTarget, 1)
	EV(SavingThrow, 2)
	EV(AllSavingThrows, 3)
	EV(Ability, 4)
	EV(AllAbilities, 5)
	EV(Skill, 6)
	EV(AllSkills, 7)
	EV(SourceDialogue, 8)
	EV(DeathSavingThrow, 9)
	EV(Concentration, 10)
END_ENUM()

BEGIN_BITMASK(AttributeFlags, uint32_t)
	EV(SlippingImmunity, 0x1)
	EV(Torch, 0x2)
	EV(Arrow, 0x4)
	EV(Unbreakable, 0x8)
	EV(Unrepairable, 0x10)
	EV(Unstorable, 0x20)
	EV(Grounded, 0x40)
	EV(Floating, 0x80)
	EV(InventoryBound, 0x100)
	EV(IgnoreClouds, 0x200)
	EV(LootableWhenEquipped, 0x400)
	EV(PickpocketableWhenEquipped, 0x800)
	EV(LoseDurabilityOnCharacterHit, 0x1000)
	EV(ThrownImmunity, 0x2000)
	EV(InvisibilityImmunity, 0x4000)
	EV(InvulnerableAndInteractive, 0x8000)
	EV(Backstab, 0x10000)
	EV(BackstabImmunity, 0x20000)
	EV(EnableObscurityEvents, 0x40000)
	EV(ObscurityWithoutSneaking, 0x80000)
	EV(FloatingWhileMoving, 0x100000)
	EV(ForceMainhandAlternativeEquipBones, 0x200000)
	EV(UseMusicalInstrumentForCasting, 0x400000)
END_ENUM()

BEGIN_ENUM(AdvantageBoostType, uint8_t)
	EV(Advantage, 1)
	EV(Disadvantage, 2)
END_ENUM()

BEGIN_ENUM(DiceSizeId, uint8_t)
	EV(D4, 0)
	EV(D6, 1)
	EV(D8, 2)
	EV(D10, 3)
	EV(D12, 4)
	EV(D20, 5)
	EV(D100, 6)
	EV(Default, 8)
END_ENUM()

BEGIN_ENUM(SpellChildSelectionType, uint8_t)
	EV(Singular, 0)
	EV(AddChildren, 1)
	EV(MostPowerful, 2)
END_ENUM()

BEGIN_ENUM(SpellPrepareType, uint8_t)
	EV(AlwaysPrepared, 0)
	EV(RequiresPreparation, 1)
	EV(Unknown, 2)
END_ENUM()

BEGIN_BITMASK(ResourceReplenishType, uint8_t)
	EV(Never, 0x01)
	EV(Default, 0x02)
	EV(Combat, 0x04)
	EV(Rest, 0x8)
	EV(ShortRest, 0x10)
	EV(FullRest, 0x20)
	EV(ExhaustedRest, 0x40)
END_ENUM()

BEGIN_ENUM(SpellCooldownType, uint8_t)
	EV(Default, 0)
	EV(OncePerTurn, 1)
	EV(OncePerCombat, 2)
	EV(UntilRest, 3)
	EV(OncePerTurnNoRealtime, 4)
	EV(UntilShortRest, 5)
	EV(UntilPerRestPerItem, 6)
	EV(OncePerShortRestPerItem, 7)
END_ENUM()

BEGIN_ENUM(SourceAdvantageType, uint8_t)
	EV(SourceAdvantageOnAttack, 1)
	EV(SourceAllyAdvantageOnAttack, 2)
END_ENUM()

BEGIN_ENUM(ProficiencyBonusBoostType, uint32_t)
	EV(AttackRoll, 0)
	EV(AttackTarget, 1)
	EV(SavingThrow, 2)
	EV(AllSavingThrows, 3)
	EV(Ability, 4)
	EV(AllAbilities, 5)
	EV(Skill, 6)
	EV(AllSkills, 7)
	EV(SourceDialogue, 8)
	EV(WeaponActionDC, 9)
END_ENUM()

BEGIN_ENUM(Gender, uint8_t)
	EV(Male, 0)
	EV(Female, 1)
END_ENUM()

BEGIN_BITMASK(CriticalHitBoostFlags, uint8_t)
	EV(Success, 1)
	EV(SuccessNever, 2)
	EV(Failure, 1)
	EV(FailureNever, 8)
	EV(AttackTarget, 16)
	EV(AttackRoll, 32)
END_ENUM()

BEGIN_BITMASK(ResistanceBoostFlags, uint8_t)
	EV(BelowDamageThreshold, 0x01)
	EV(ResistantToMagical, 0x02)
	EV(ImmuneToMagical, 0x04)
	EV(VulnerableToMagical, 0x08)
	EV(ResistantToNonMagical, 0x10)
	EV(ImmuneToNonMagical, 0x20)
	EV(VulnerableToNonMagical, 0x40)
END_ENUM()

BEGIN_ENUM(SurfaceChange, uint8_t)
	EV(None, 0)
	EV(Ignite, 1)
	EV(Douse, 2)
	EV(Electrify, 3)
	EV(Deelectrify, 4)
	EV(Freeze, 5)
	EV(Melt, 6)
	EV(Vaporize, 7)
	EV(Condense, 8)
	EV(DestroyWater, 9)
END_ENUM()

BEGIN_ENUM(WeaponType, uint8_t)
	EV(None, 0)
	EV(Sword, 1)
	EV(Club, 2)
	EV(Axe, 3)
	EV(Staff, 4)
	EV(Bow, 5)
	EV(Crossbow, 6)
	EV(Spear, 7)
	EV(Knife, 8)
	EV(Wand, 9)
	EV(Arrow, 10)
	EV(Rifle, 11)
	EV(Sentinel, 12)
END_ENUM()

BEGIN_BITMASK_NS(stats, TargetTypeFlags, StatsTargetTypeFlags, uint8_t)
	EV(Living, 1)
	EV(Guaranteed, 2)
	EV(Construct, 4)
	EV(Undead, 8)
END_ENUM_NS()

BEGIN_ENUM(DealDamageWeaponType, uint8_t)
	EV(None, 0)
	EV(MainWeapon, 1)
	EV(OffhandWeapon, 2)
	EV(MainMeleeWeapon, 3)
	EV(OffhandMeleeWeapon, 4)
	EV(MainRangedWeapon, 5)
	EV(OffhandRangedWeapon, 6)
	EV(SourceWeapon, 7)
	EV(UnarmedDamage, 8)
	EV(ThrownWeapon, 9)
	EV(ImprovisedWeapon, 10)
END_ENUM()

BEGIN_ENUM(DealDamageWeaponDamageType, uint8_t)
	EV(None, 0)
	EV(MainWeaponDamageType, 1)
	EV(OffhandWeaponDamageType, 2)
	EV(MainMeleeWeaponDamageType, 3)
	EV(OffhandMeleeWeaponDamageType, 4)
	EV(MainRangedWeaponDamageType, 5)
	EV(OffhandRangedWeaponDamageType, 6)
	EV(SourceWeaponDamageType, 7)
	EV(ThrownWeaponDamageType, 8)
END_ENUM()

BEGIN_ENUM(ExecuteWeaponFunctorsType, uint8_t)
	EV(MainHand, 0)
	EV(OffHand, 1)
	EV(BothHands, 2)
	EV(Undefined, 3)
END_ENUM()

BEGIN_ENUM(SetStatusDurationType, uint8_t)
	EV(SetMinimum, 0)
	EV(ForceSet, 1)
	EV(Add, 2)
	EV(Multiply, 3)
	EV(Unknown, 4)
END_ENUM()

BEGIN_ENUM(ForceFunctorOrigin, uint8_t)
	EV(OriginToEntity, 0)
	EV(OriginToTarget, 1)
	EV(TargetToEntity, 2)
	EV(Undefined, 3)
END_ENUM()

BEGIN_ENUM(ForceFunctorAggression, uint8_t)
	EV(Aggressive, 0)
	EV(Friendly, 1)
	EV(Neutral, 2)
	EV(Undefined, 3)
END_ENUM()


BEGIN_ENUM(ArmorType, uint32_t)
	EV(None, 0)
	EV(Cloth, 1)
	EV(Padded, 2)
	EV(Leather, 3)
	EV(StuddedLeather, 4)
	EV(Hide, 5)
	EV(ChainShirt, 6)
	EV(ScaleMail, 7)
	EV(BreastPlate, 8)
	EV(HalfPlate, 9)
	EV(RingMail, 10)
	EV(ChainMail, 11)
	EV(Splint, 12)
	EV(Plate, 13)
	EV(Sentinel, 14)
END_ENUM()


BEGIN_ENUM(HandednessType, uint32_t)
	EV(Any, 0)
	EV(One, 1)
	EV(Two, 2)
END_ENUM()

BEGIN_ENUM(EquipmentStatsType, uint32_t)
	EV(Weapon, 0)
	EV(Armor, 1)
	EV(Shield, 2)
END_ENUM()


BEGIN_BITMASK_NS(esv, StatusFlags, ServerStatusFlags, uint8_t)
	EV(ForceStatus, 1)
	EV(ForceFailStatus, 2)
	EV(IgnoreStacking, 4)
	EV(RequestClientSync, 8)
	EV(Loaded, 0x10)
	EV(RequestDelete, 0x20)
	EV(RequestDeleteAtTurnEnd, 0x40)
	EV(Started, 0x80)
END_ENUM_NS()

BEGIN_BITMASK_NS(esv, StatusFlags2, ServerStatusFlags2, uint8_t)
	EV(KeepAlive, 1)
	EV(DontTickWhileOnSurface, 2)
	EV(IsOnSourceSurface, 4)
	EV(IsFromItem, 8)
	EV(IsChanneled, 0x10)
	EV(IsLifeTimeSet, 0x20)
	EV(InitiateCombat, 0x40)
	EV(Influence, 0x80)
END_ENUM_NS()


BEGIN_BITMASK_NS(esv, StatusFlags3, ServerStatusFlags3, uint8_t)
	EV(IsUnique, 1)
	EV(NotifiedPlanManager, 2)
	EV(DisableImmunityOverhead, 4)
	EV(StatusFlags3_0x08, 8)
	EV(StatusFlags3_0x10, 0x10)
	EV(StatusFlags3_0x20, 0x20)
	EV(StatusFlags3_0x40, 0x40)
	EV(StatusFlags3_0x80, 0x80)
END_ENUM_NS()


BEGIN_BITMASK_NS(esv, StatusFlags4, ServerStatusFlags4, uint8_t)
	EV(BringIntoCombat, 1)
	EV(IsHostileAct, 2)
	EV(StatusFlags4_0x04, 4)
	EV(IsInvulnerable, 8)
	EV(IsInvulnerableVisible, 0x10)
	EV(CausedByEquipment, 0x20)
	EV(CauseIsOrigin, 0x40)
	EV(StatusFlags4_0x80, 0x80)
END_ENUM_NS()


BEGIN_BITMASK_NS(esv, StatusFlags5, ServerStatusFlags5, uint8_t)
	EV(HasTriedEntering, 1)
END_ENUM_NS()


BEGIN_BITMASK_NS(esv, StatusMaterialApplyFlags, StatusMaterialApplyFlags, uint8_t)
	EV(ApplyOnBody, 1)
	EV(ApplyOnArmor, 2)
	EV(ApplyOnWeapon, 4)
	EV(ApplyOnWings, 8)
	EV(ApplyOnHorns, 0x10)
	EV(ApplyOnOverhead, 0x20)
END_ENUM_NS()


BEGIN_ENUM(StatusType, uint32_t)
	EV(DYING, 1)
	EV(HEAL, 2)
	EV(KNOCKED_DOWN, 3)
	EV(TELEPORT_FALLING, 4)
	EV(BOOST, 5)
	EV(REACTION, 6)
	EV(STORY_FROZEN, 7)
	EV(SNEAKING, 8)
	EV(UNLOCK, 9)
	EV(FEAR, 10)
	EV(SMELLY, 11)
	EV(INVISIBLE, 12)
	EV(ROTATE, 13)
	EV(MATERIAL, 14)
	EV(CLIMBING, 15)
	EV(INCAPACITATED, 16)
	EV(INSURFACE, 17)
	EV(POLYMORPHED, 18)
	EV(EFFECT, 19)
	EV(DEACTIVATED, 20)
	EV(DOWNED, 21)
END_ENUM()


BEGIN_ENUM(CauseType, uint8_t)
	EV(None, 0)
	EV(SurfaceMove, 1)
	EV(SurfaceCreate, 2)
	EV(SurfaceStatus, 3)
	EV(StatusEnter, 4)
	EV(StatusTick, 5)
	EV(Attack, 6)
	EV(Offhand, 7)
	EV(AURA, 8)
	EV(InventoryItem, 9)
	EV(WorldItemThrow, 10)
END_ENUM()


BEGIN_BITMASK(DamageFlags, uint32_t)
	EV(Hit, 0x0001)
	EV(Dodge, 0x0002)
	EV(Miss, 0x0004)
	EV(StatusEnter, 0x0008)
	EV(Critical, 0x0010)
	EV(Backstab, 0x0020)
	EV(Invisible, 0x0040)
	EV(Magical, 0x0080)
	EV(Invulnerable, 0x0100)
	EV(SavingThrow, 0x0200)
	EV(Projectile, 0x0400)
	EV(HitpointsDamaged, 0x0800)
	EV(Surface, 0x1000)
	EV(Status, 0x2000)
	EV(AttackAdvantage, 0x4000)
	EV(AttackDisadvantage, 0x8000)
END_ENUM()


BEGIN_BITMASK_NS(stats, StatusGroup, StatsStatusGroup, uint64_t)
	EV(SG_Condition, 1)
	EV(SG_Blinded, 2)
	EV(SG_Charmed, 4)
	EV(SG_Cursed, 8)
	EV(SG_Disease, 16)
	EV(SG_Exhausted, 32)
	EV(SG_Frightened, 64)
	EV(SG_Incapacitated, 128)
	EV(SG_Invisible, 256)
	EV(SG_Poisoned, 512)
	EV(SG_Prone, 1024)
	EV(SG_Restrained, 2048)
	EV(SG_Stunned, 4096)
	EV(SG_Unconscious, 0x2000)
	EV(SG_Surface, 0x4000)
	EV(SG_Polymorph, 0x8000)
	EV(SG_Paralyzed, 0x10000)
	EV(SG_Light, 0x20000)
	EV(SG_Disguise, 0x40000)
	EV(SG_Possessed, 0x80000)
	EV(SG_Petrified, 0x100000)
	EV(SG_Polymorph_BeastShape, 0x200000)
	EV(SG_Polymorph_BeastShape_NPC, 0x400000)
	EV(SG_Poisoned_Story_Removable, 0x800000)
	EV(SG_Poisoned_Story_NonRemovable, 0x1000000)
	EV(SG_Charmed_Subtle, 0x2000000)
	EV(SG_Helpable_Condition, 0x4000000)
	EV(SG_Rage, 0x8000000)
	EV(SG_Taunted, 0x10000000)
	EV(SG_Approaching, 0x20000000)
	EV(SG_Dominated, 0x40000000)
	EV(SG_Fleeing, 0x80000000)
	EV(SG_Confused, 0x100000000)
	EV(SG_Mad, 0x200000000)
	EV(SG_DetectThoughts, 0x400000000)
	EV(SG_DifficultTerrain, 0x800000000)
	EV(SG_ScriptedPeaceBehaviour, 0x1000000000)
	EV(SG_DropForNonMutingDialog, 0x2000000000)
	EV(SG_HexbladeCurse, 0x4000000000)
	EV(SG_WeaponCoating, 0x8000000000)
	EV(SG_Doppelganger, 0x10000000000)
	EV(SG_CanBePickedUp, 0x20000000000)
	EV(SG_Drunk, 0x40000000000)
	EV(SG_Sleeping, 0x80000000000)
	EV(SG_RemoveOnRespec, 0x100000000000)
	EV(SG_Ignore_AOO, 0x200000000000)
END_ENUM_NS()


BEGIN_ENUM_NS(stats, ZoneShape, StatsZoneShape, uint8_t)
	EV(Cone, 0)
	EV(Square, 1)
END_ENUM_NS()


BEGIN_ENUM_NS(stats, DeathType, StatsDeathType, uint8_t)
	EV(None, 0)
	EV(Acid, 1)
	EV(Chasm, 2)
	EV(DoT, 3)
	EV(Electrocution, 4)
	EV(Explode, 5)
	EV(Falling, 6)
	EV(Incinerate, 7)
	EV(KnockedDown, 8)
	EV(Lifetime, 9)
	EV(Necrotic, 10)
	EV(Physical, 11)
	EV(Psychic, 12)
	EV(Radiant, 13)
	EV(CinematicDeath, 14)
	EV(Cold, 15)
	EV(Disintegrate, 16)
END_ENUM_NS()


BEGIN_ENUM(DamageType, uint8_t)
	EV(None, 0)
	EV(Slashing, 1)
	EV(Piercing, 2)
	EV(Bludgeoning, 3)
	EV(Acid, 4)
	EV(Thunder, 5)
	EV(Necrotic, 6)
	EV(Fire, 7)
	EV(Lightning, 8)
	EV(Cold, 9)
	EV(Psychic, 10)
	EV(Poison, 11)
	EV(Radiant, 12)
	EV(Force, 13)
	EV(Sentinel, 14)
END_ENUM()


BEGIN_ENUM(HitType, uint32_t)
	EV(Melee, 0)
	EV(Magic, 1)
	EV(Ranged, 2)
	EV(WeaponDamage, 3)
	EV(Surface, 4)
	EV(DoT, 5)
	EV(Reflected, 6)
END_ENUM()


BEGIN_ENUM(HitWith, uint8_t)
	EV(None, 0)
	EV(Weapon, 1)
	EV(Magic, 2)
	EV(Item, 3)
	EV(Projectile, 4)
	EV(Trap, 5)
	EV(Surface, 6)
	EV(Redirection, 7)
	EV(FallDamage, 8)
	EV(CrushByFall, 9)
	EV(Unknown, 9)
	EV(Unknown10, 10)
	EV(Unknown11, 11)
END_ENUM()


BEGIN_ENUM(ItemSlot, uint8_t)
	EV(Helmet, 0)
	EV(Breast, 1)
	EV(Cloak, 2)
	EV(MeleeMainHand, 3)
	EV(MeleeOffHand, 4)
	EV(RangedMainHand, 5)
	EV(RangedOffHand, 6)
	EV(Ring, 7)
	EV(Underwear, 8)
	EV(Boots, 9)
	EV(Gloves, 10)
	EV(Amulet, 11)
	EV(Ring2, 12)
	EV(Wings, 13)
	EV(Horns, 14)
	EV(Overhead, 15)
	EV(MusicalInstrument, 16)
	EV(VanityBody, 17)
	EV(VanityBoots, 18)
	EV(MainHand, 19)
	EV(OffHand, 20)
END_ENUM()


BEGIN_ENUM(StatsItemSlot, uint8_t)
	EV(Helmet, 0)
	EV(Breast, 1)
	EV(Cloak, 2)
	EV(MeleeMainHand, 3)
	EV(MeleeOffHand, 4)
	EV(RangedMainHand, 5)
	EV(RangedOffHand, 6)
	EV(Ring, 7)
	EV(Underwear, 8)
	EV(Boots, 9)
	EV(Gloves, 10)
	EV(Amulet, 11)
	EV(Ring2, 12)
	EV(Wings, 13)
	EV(Horns, 14)
	EV(Overhead, 15)
	EV(MusicalInstrument, 16)
	EV(VanityBody, 17)
	EV(VanityBoots, 18)
	EV(MainHand, 19)
	EV(OffHand, 20)
	EV(Max, 21)
	EV(Sentinel, 22)
END_ENUM()


BEGIN_BITMASK(StatCharacterFlags, uint8_t)
	EV(IsPlayer, 1)
	EV(InParty, 2)
	EV(IsSneaking, 4)
	EV(Invisible, 8)
	EV(Blind, 16)
	EV(DrinkedPotion, 32)
	EV(EquipmentValidated, 64)
END_ENUM()


BEGIN_ENUM(StatusHealType, uint8_t)
	EV(None, 0)
	EV(Vitality, 1)
	EV(PhysicalArmor, 2)
	EV(MagicArmor, 3)
	EV(AllArmor, 4)
	EV(All, 5)
	EV(Source, 6)
END_ENUM()


BEGIN_ENUM(HealEffect, uint32_t)
	EV(None, 0)
	EV(ResistDeath, 1)
	EV(Heal, 2)
	EV(Behavior, 3)
	EV(Unknown4, 4)
	EV(Sitting, 5)
	EV(Surface, 6)
	EV(Lifesteal, 7)
	EV(NegativeDamage, 8)
	EV(Unknown9, 9)
	EV(Script, 10)
	EV(HealSharing, 11)
	EV(Necromantic, 12)
	EV(HealSharingReflected, 13)
END_ENUM()

BEGIN_BITMASK(RestFlags, uint16_t)
	EV(CanShortRest, 1)
	EV(CanLongRest, 2)
	EV(Unknown0x04, 4)
END_ENUM()

BEGIN_BITMASK(RestErrorFlags, uint8_t)
	EV(GlobalDisabled, 1)
	EV(Script, 2)
	EV(Dialog, 4)
	EV(Combat, 8)
	EV(FTB, 0x10)
	EV(NotEnoughResources, 0x20)
	EV(DownedOrDead, 0x40)
END_ENUM()

BEGIN_BITMASK(TravelFlags, uint16_t)
	EV(BlockFastTravel, 1)
	EV(BlockCampTravel, 2)
END_ENUM()

BEGIN_BITMASK(TravelErrorFlags, uint16_t)
	EV(InDanger, 2)
	EV(Condition, 4)
	EV(DangerZone, 8)
	EV(Dialog, 0x10)
	EV(CannotFastTravel, 0x40)
	EV(FTB, 0x100)
END_ENUM()

BEGIN_BITMASK(FleeErrorFlags, uint8_t)
	EV(Region, 1)
	EV(EnemyTooClose, 2)
	EV(CantMove, 4)
	EV(Downed, 8)
	EV(Incapacitated, 0x10)
	EV(Condition, 0x20)
	EV(Summon, 0x40)
	EV(PartyFollower, 0x80)
END_ENUM()

// Persistent flags: 0x2414170022110
// AI flags: 0x4000070000060
BEGIN_BITMASK_NS(esv, CharacterFlags, ServerCharacterFlags, uint64_t)
	EV(IsPlayer, 0x01)
	EV(Multiplayer, 0x02)
	EV(InParty, 0x04)
	EV(HostControl, 0x08)
	EV(Activated, 0x10)
	EV(OffStage, 0x20)
	EV(Dead, 0x40)
	EV(HasOwner, 0x80)
	EV(InDialog, 0x100)
	EV(Summon, 0x200)
	EV(Invulnerable, 0x400)
	EV(CannotDie, 0x800)
	EV(StoryNPC, 0x1000)
	EV(CharacterControl, 0x2000)
	EV(Loaded, 0x4000)
	EV(Unknown8000, 0x8000)
	EV(Invisible, 0x10000)
	EV(ForceNonzeroSpeed, 0x20000)
	EV(FindValidPositionOnActivate, 0x40000)
	EV(CannotAttachToGroups, 0x80000)
	EV(CharCreationInProgress, 0x100000)
	EV(CharacterCreationFinished, 0x200000)
	EV(Floating, 0x400000)
	EV(FightMode, 0x800000)
	EV(SpotSneakers, 0x1000000)
	EV(Temporary, 0x2000000)
	EV(CannotMove, 0x4000000)
	EV(CannotRun, 0x8000000)
	EV(WalkThrough, 0x10000000)
	EV(CoverAmount, 0x20000000)
	EV(CanShootThrough, 0x40000000)
	EV(Unknown80000000, 0x80000000)
	EV(DontCacheTemplate, 0x100000000)
	EV(ReservedForDialog, 0x200000000)
	EV(PartyFollower, 0x400000000)
	EV(DisableWaypointUsage, 0x800000000)
	EV(IgnoresTriggers, 0x1000000000)
	EV(Totem, 0x2000000000)
	EV(IsTrading, 0x4000000000)
	EV(SteeringEnabled, 0x8000000000)
	EV(Unknown10000000000, 0x10000000000)
	EV(IsCompanion_M, 0x20000000000)
	EV(Unknown40000000000, 0x40000000000)
	EV(Deactivated, 0x80000000000)
	EV(CustomLookEnabled, 0x100000000000)
	EV(IsHuge, 0x200000000000)
	EV(DisableCulling, 0x400000000000)
	EV(DoNotFaceFlag, 0x800000000000)
	EV(NeedsMakePlayerUpdate, 0x1000000000000)
	EV(GMReroll, 0x2000000000000)
	EV(Detached, 0x4000000000000)
	EV(RequestStartTurn, 0x8000000000000)
	EV(DeferredRemoveEscapist, 0x10000000000000)
	EV(LevelTransitionPending, 0x20000000000000)
	EV(RegisteredForAutomatedDialog, 0x40000000000000)
	EV(Unknown80000000000000, 0x80000000000000)
END_ENUM_NS()


BEGIN_BITMASK_NS(esv, CharacterFlags2, ServerCharacterFlags2, uint8_t)
	EV(Global, 0x01)
	EV(TreasureGeneratedForTrader, 0x02)
	EV(Trader, 0x04)
	EV(IsResurrected, 0x08)
	EV(Unknown0x10, 0x10)
	EV(IsPet, 0x20)
	EV(Unknown0x40, 0x40)
	EV(CanGossip, 0x80)
END_ENUM_NS()


BEGIN_BITMASK_NS(esv, CharacterFlags3, ServerCharacterFlags3, uint8_t)
	EV(NeedsPlacementSnapping, 0x01)
	EV(CrimeWarningsEnabled, 0x02)
END_ENUM_NS()

BEGIN_BITMASK_NS(esv, ItemFlags, ServerItemFlags, uint64_t)
	EV(Activated, 0x01)
	EV(OffStage, 0x02)
	EV(CanBePickedUp, 0x04)
	EV(CanBeMoved, 0x08)
	EV(WalkOn, 0x10)
	EV(WalkThrough, 0x20)
	EV(NoCover, 0x40)
	EV(CanShootThrough, 0x80)
	EV(CanUse, 0x100)
	EV(InteractionDisabled, 0x200)
	EV(TransformChanged, 0x400)
	EV(Destroyed, 0x800)
	EV(IsMoving, 0x1000)
	EV(CanOnlyBeUsedByOwner, 0x2000)
	EV(LoadedTemplate, 0x4000)
	EV(IsDoor, 0x8000)
	EV(Invisible, 0x10000)
	EV(StoryItem, 0x20000)
	EV(ClientSync1, 0x40000)
	EV(WakePhysics, 0x80000)
	EV(Summon, 0x100000)
	EV(IsContainer, 0x200000)
	EV(HideHP, 0x400000)
	EV(LuckyFind, 0x800000)
	EV(FreezeGravity, 0x1000000)
	EV(ForceSync, 0x2000000)
	EV(Known, 0x4000000)
	EV(Invisible2, 0x8000000)
	EV(DisableSync, 0x10000000)
	EV(IsLadder, 0x20000000)
	EV(ReservedForDialog, 0x40000000)
	EV(Invulnerable, 0x80000000)
	EV(DisableInventoryView80, 0x100000000)
	EV(DontAddToHotbar, 0x200000000)
	EV(PositionChanged, 0x400000000)
	EV(Totem, 0x800000000)
	EV(Destroy, 0x2000000000)
	EV(GMFolding, 0x4000000000)
	EV(InUse, 0x8000000000)
	EV(Sticky, 0x10000000000)
	EV(IsSecretDoor, 0x20000000000)
	EV(Floating, 0x40000000000)
	EV(IsSurfaceBlocker, 0x80000000000)
	EV(IsSurfaceCloudBlocker, 0x100000000000)
	EV(Invulnerable2, 0x200000000000)
	EV(ForceClientSync, 0x400000000000)
	EV(InPartyInventory, 0x800000000000)
	EV(SourceContainer, 0x1000000000000)
	EV(Frozen, 0x2000000000000)
	EV(LevelTransitionPending, 0x4000000000000)
	EV(TeleportOnUse, 0x8000000000000)
	EV(InAutomatedDialog, 0x10000000000000)
	EV(PinnedContainer, 0x20000000000000)
END_ENUM_NS()

BEGIN_BITMASK_NS(esv, ItemFlags2, ServerItemFlags2, uint8_t)
	EV(UnsoldGenerated, 0x01)
	EV(Global, 0x02)
	EV(TreasureGenerated, 0x08)
	EV(UnEquipLocked, 0x10)
	EV(UseRemotely, 0x20)
END_ENUM_NS()

BEGIN_BITMASK(AIFlags, uint8_t)
	EV(CanNotUse, 0x01)
	EV(IgnoreSelf, 0x02)
	EV(IgnoreDebuff, 0x04)
	EV(IgnoreBuff, 0x08)
	EV(StatusIsSecondary, 0x10)
	EV(IgnoreControl, 0x20)
	EV(CanNotTargetFrozen, 0x40)
END_ENUM()

BEGIN_ENUM(IngredientType, int)
	EV(None, 0)
	EV(Object, 1)
	EV(Category, 2)
	EV(Property, 3)
END_ENUM()

BEGIN_ENUM(IngredientTransformType, int)
	EV(None, 0)
	EV(Consume, 1)
	EV(Transform, 2)
	EV(Boost, 3)
	EV(Poison, 4)
END_ENUM()

BEGIN_ENUM(ItemDataRarity, uint8_t)
	EV(Common, 0)
	EV(Unique, 1)
	EV(Uncommon, 2)
	EV(Rare, 3)
	EV(Epic, 4)
	EV(Legendary, 5)
	EV(Divine, 6)
	EV(Sentinel, 7)
END_ENUM()

BEGIN_ENUM(RecipeCategory, int)
	EV(Common, 0)
	EV(Weapons, 1)
	EV(Potions, 2)
	EV(Grenades, 3)
	EV(Arrows, 4)
	EV(Armour, 5)
	EV(Food, 6)
	EV(Objects, 7)
	EV(Runes, 8)
	EV(Grimoire, 9)
END_ENUM()

BEGIN_ENUM(CraftingStationType, int)
	EV(None, 0)
	EV(Anvil, 1)
	EV(Oven, 2)
	EV(Wetstone, 3)
	EV(Well, 4)
	EV(BoilingPot, 5)
	EV(Beehive, 6)
	EV(SpinningWheel, 7)
	EV(Cauldron, 8)
	EV(Misc1, 9)
	EV(Misc2, 10)
	EV(Misc3, 11)
	EV(Misc4, 12)
END_ENUM()

BEGIN_ENUM(ShroudType, uint8_t)
	EV(Shroud, 0)
	EV(Sight, 1)
	EV(Sneak, 2)
	EV(RegionMask, 3)
END_ENUM()

BEGIN_ENUM(BoostCauseType, uint32_t)
	EV(Undefined, 0)
	EV(Item, 1)
	EV(Status, 2)
	EV(Passive, 3)
	EV(Osiris, 4)
	EV(Unknown5, 5)
	EV(Progression, 6)
	EV(Stats, 7)
	EV(Character, 8)
END_ENUM()

BEGIN_BITMASK(ProficiencyGroupFlags, uint64_t)
	EV(Battleaxes, 0x01)
	EV(Clubs, 0x02)
	EV(Daggers, 0x04)
	EV(Darts, 0x08)
	EV(Flails, 0x10)
	EV(Glaives, 0x20)
	EV(Greataxes, 0x40)
	EV(Greatclubs, 0x80)
	EV(Greatswords, 0x100)
	EV(Halberds, 0x200)
	EV(HandCrossbows, 0x400)
	EV(Handaxes, 0x800)
	EV(HeavyArmor, 0x1000)
	EV(HeavyCrossbows, 0x2000)
	EV(Javelins, 0x4000)
	EV(LightArmor, 0x8000)
	EV(LightCrossbows, 0x10000)
	EV(LightHammers, 0x20000)
	EV(Longbows, 0x40000)
	EV(Longswords, 0x80000)
	EV(Maces, 0x100000)
	EV(MartialWeapons, 0x200000)
	EV(Mauls, 0x400000)
	EV(MediumArmor, 0x800000)
	EV(Morningstars, 0x1000000)
	EV(Pikes, 0x2000000)
	EV(Quarterstaffs, 0x4000000)
	EV(Rapiers, 0x8000000)
	EV(Scimitars, 0x10000000)
	EV(Shields, 0x20000000)
	EV(Shortbows, 0x40000000)
	EV(Shortswords, 0x80000000)
	EV(Sickles, 0x100000000)
	EV(SimpleWeapons, 0x200000000)
	EV(Slings, 0x400000000)
	EV(Spears, 0x800000000)
	EV(Tridents, 0x1000000000)
	EV(Warhammers, 0x2000000000)
	EV(Warpicks, 0x4000000000)
	EV(MusicalInstrument, 0x8000000000)
END_ENUM()

BEGIN_BITMASK(SpellFlags, uint64_t)
	EV(HasVerbalComponent, 0x1)
	EV(HasSomaticComponent, 0x2)
	EV(IsJump, 0x4)
	EV(IsAttack, 0x8)
	EV(IsMelee, 0x10)
	EV(HasHighGroundRangeExtension, 0x20)
	EV(IsConcentration, 0x40)
	EV(AddFallDamageOnLand, 0x80)
	EV(ConcentrationIgnoresResting, 0x100)
	EV(InventorySelection, 0x200)
	EV(IsSpell, 0x400)
	EV(CombatLogSetSingleLineRoll, 0x800)
	EV(IsEnemySpell, 0x1000)
	EV(CannotTargetCharacter, 0x2000)
	EV(CannotTargetItems, 0x4000)
	EV(CannotTargetTerrain, 0x8000)
	EV(IgnoreVisionBlock, 0x10000)
	EV(Stealth, 0x20000)
	EV(AddWeaponRange, 0x40000)
	EV(IgnoreSilence, 0x80000)
	EV(ImmediateCast, 0x100000)
	EV(RangeIgnoreSourceBounds, 0x200000)
	EV(RangeIgnoreTargetBounds, 0x400000)
	EV(RangeIgnoreVerticalThreshold, 0x800000)
	EV(NoSurprise, 0x1000000)
	EV(IsHarmful, 0x2000000)
	EV(IsTrap, 0x4000000)
	EV(IsDefaultWeaponAction, 0x8000000)
	EV(CallAlliesSpell, 0x10000000)
	EV(TargetClosestEqualGroundSurface, 0x20000000)
	EV(CannotRotate, 0x40000000)
	EV(NoCameraMove, 0x80000000)
	EV(CanDualWield, 0x100000000)
	EV(IsLinkedSpellContainer, 0x200000000)
	EV(Invisible, 0x400000000)
	EV(AllowMoveAndCast, 0x800000000)
	EV(UNUSED_D, 0x1000000000)
	EV(Wildshape, 0x2000000000)
	EV(UNUSED_E, 0x4000000000)
	EV(UnavailableInDialogs, 0x8000000000)
	EV(TrajectoryRules, 0x10000000000)
	EV(PickupEntityAndMove, 0x20000000000)
	EV(Temporary, 0x40000000000)
	EV(RangeIgnoreBlindness, 0x80000000000)
	EV(AbortOnSpellRollFail, 0x100000000000)
	EV(AbortOnSecondarySpellRollFail, 0x200000000000)
	EV(CanAreaDamageEvade, 0x400000000000)
	EV(DontAbortPerforming, 0x800000000000)
	EV(NoCooldownOnMiss, 0x1000000000000)
	EV(NoAOEDamageOnLand, 0x2000000000000)
	EV(IsSwarmAttack, 0x4000000000000)
	EV(DisplayInItemTooltip, 0x8000000000000)
	EV(HideInItemTooltip, 0x10000000000000)
	EV(DisableBlood, 0x20000000000000)
	EV(IgnorePreviouslyPickedEntities, 0x40000000000000)
	EV(IgnoreAoO, 0x80000000000000)
END_ENUM()

BEGIN_ENUM(BoostType, uint8_t)
	E(AC)
	E(Ability)
	E(RollBonus)
	E(Advantage)
	E(ActionResource)
	E(CriticalHit)
	E(AbilityFailedSavingThrow)
	E(Resistance)
	E(WeaponDamageResistance)
	E(ProficiencyBonusOverride)
	E(ActionResourceOverride) // Has no component
	E(AddProficiencyToAC) // Has no component
	EV(JumpMaxDistanceMultiplier, 12)
	E(AddProficiencyToDamage) // Has no component
	EV(ActionResourceConsumeMultiplier, 14)
	E(BlockVerbalComponent) // Has no component
	E(BlockSomaticComponent) // Has no component
	EV(HalveWeaponDamage, 17)
	EV(UnlockSpell, 19)
	EV(SourceAdvantageOnAttack, 20)
	EV(ProficiencyBonus, 21)
	E(BlockSpellCast) // Has no component
	EV(Proficiency, 23)
	E(SourceAllyAdvantageOnAttack)
	E(IncreaseMaxHP)
	E(ActionResourceBlock)
	E(StatusImmunity)
	E(UseBoosts)
	E(CannotHarmCauseEntity)
	E(TemporaryHP)
	E(Weight)
	E(WeightCategory)
	E(FactionOverride)
	E(ActionResourceMultiplier)
	E(BlockRegainHP)
	E(Initiative)
	E(DarkvisionRange)
	E(DarkvisionRangeMin)
	E(DarkvisionRangeOverride)
	E(Tag)
	E(IgnoreDamageThreshold)
	E(Skill)
	E(WeaponDamage)
	E(NullifyAbilityScore)
	E(IgnoreFallDamage)
	EV(Reroll, 46)
	EV(DownedStatus, 47)
	E(Invulnerable) // Has no component
	EV(WeaponEnchantment, 49)
	EV(GuaranteedChanceRollOutcome, 50)
	EV(Attribute, 51)
	E(IgnoreLeaveAttackRange) // Has no component
	EV(GameplayLight, 53)
	E(DialogueBlock)
	E(DualWielding)
	EV(Savant, 56)
	EV(MinimumRollResult, 57)
	E(Lootable) // Has no component
	EV(CharacterWeaponDamage, 59)
	E(ProjectileDeflect)
	E(AbilityOverrideMinimum)
	E(ACOverrideFormula)
	E(FallDamageMultiplier)
	EV(ActiveCharacterLight, 64)
	E(Invisibility) // Has no component
	E(TwoWeaponFighting) // Has no component
	EV(WeaponAttackTypeOverride, 67)
	E(WeaponDamageDieOverride)
	E(CarryCapacityMultiplier)
	E(WeaponProperty)
	EV(WeaponAttackRollAbilityOverride, 71)
	E(BlockTravel) // Has no component
	E(BlockGatherAtCamp) // Has no component
	E(BlockAbilityModifierDamageBonus) // Has no component
	E(VoicebarkBlock) // Has no component
	E(HiddenDuringCinematic) // Has no component
	EV(SightRangeAdditive, 77)
	E(SightRangeMinimum)
	E(SightRangeMaximum)
	EV(SightRangeOverride, 80)
	E(CannotBeDisarmed) // Has no component
	EV(MovementSpeedLimit, 82)
	E(NonLethal) // Has no component
	EV(UnlockSpellVariant, 84)
	E(DetectDisturbancesBlock)
	E(BlockAbilityModifierFromAC)
	EV(ScaleMultiplier, 87)
	E(CriticalDamageOnHit) // Has no component
	EV(DamageReduction, 89)
	E(ReduceCriticalAttackThreshold)
	E(PhysicalForceRangeBonus)
	E(ObjectSize)
	EV(ObjectSizeOverride, 93)
	E(ItemReturnToOwner) // Has no component
	EV(AiArchetypeOverride, 95)
	E(ExpertiseBonus)
	E(EntityThrowDamage)
	E(WeaponDamageTypeOverride)
	EV(MaximizeHealing, 99)
	E(IgnoreEnterAttackRange) // Has no component
	EV(DamageBonus, 101)
	E(Detach) // Has no component
	E(ConsumeItemBlock) // Has no component
	EV(AdvanceSpells, 104)
	E(SpellResistance)
	E(WeaponAttackRollBonus)
	E(SpellSaveDC)
	E(RedirectDamage)
	E(CanSeeThrough)
	E(CanShootThrough)
	EV(CanWalkThrough, 111)
	E(MonkWeaponAttackOverride) // Has no component
	EV(MonkWeaponDamageDiceOverride, 113)
	E(IntrinsicSummonerProficiency) // Has no component
	EV(HorizontalFOVOverride, 115)
	EV(CharacterUnarmedDamage, 116)
	E(UnarmedMagicalProperty) // Has no component
	EV(ActionResourceReplenishTypeOverride, 118)
	E(AreaDamageEvade) // Has no component
	EV(ActionResourcePreventReduction, 120)
	EV(AttackSpellOverride, 121)
	EV(Lock, 122)
	E(NoAOEDamageOnLand) // Has no component
	EV(IgnorePointBlankDisadvantage, 124)
	E(CriticalHitExtraDice)
	E(DodgeAttackRoll)
	E(GameplayObscurity)
	E(MaximumRollResult)
	EV(UnlockInterrupt, 129)
	E(IntrinsicSourceProficiency) // Has no component
	EV(JumpMaxDistanceBonus, 131)
	E(ArmorAbilityModifierCapOverride)
	E(IgnoreResistance)
	EV(ConcentrationIgnoreDamage, 134)
	E(LeaveTriggers) // Has no component
	EV(IgnoreLowGroundPenalty, 136)
	E(IgnoreSurfaceCover)
	E(EnableBasicItemInteractions) // Has no component
	E(SoundsBlocked) // Has no component
	E(ProficiencyBonusIncrease)
	E(NoDamageOnThrown)
	E(DamageTakenBonus)
	E(ReceivingCriticalDamageOnHit)
END_ENUM()

BEGIN_ENUM(GameActionType, int)
	EV(RainAction, 1)
	EV(StormAction, 2)
	EV(WallAction, 4)
	EV(TornadoAction, 6)
	EV(PathAction, 7)
	EV(GameObjectMoveAction, 8)
	EV(StatusDomeAction, 9)
END_ENUM()

BEGIN_ENUM(SpellType, uint8_t)
	EV(Zone, 0x1)
	EV(MultiStrike, 0x2)
	EV(Projectile, 0x3)
	EV(ProjectileStrike, 0x4)
	EV(Rush, 0x5)
	EV(Shout, 0x6)
	EV(Storm, 0x7)
	EV(Target, 0x8)
	EV(Teleportation, 0x9)
	EV(Wall, 0xA)
	EV(Throw, 0xB)
END_ENUM()

BEGIN_ENUM(SpellSourceType, uint8_t)
	EV(Progression0, 0x0)
	EV(Progression1, 0x1)
	EV(Progression2, 0x2)
	EV(Boost, 0x3)
	EV(Shapeshift, 0x4)
	EV(SpellSet2, 0x5)
	EV(SpellSet, 0x6)
	EV(WeaponAttack, 0x7)
	EV(UnarmedAttack, 0x8)
	EV(Osiris, 0x9)
	EV(Anubis, 0xA)
	EV(Behavior, 0xB)
	EV(PartyPreset, 0xC)
	EV(EquippedItem, 0xD)
	EV(GameActionCreateSurface, 0xE)
	EV(AiTest, 0xF)
	EV(CreateExplosion, 0x10)
	EV(Spell, 0x11)
	EV(ActiveDefense, 0x12)
	EV(Learned, 0x13)
	EV(Progression, 0x14)
	EV(Unknown15, 0x15)
	EV(Unknown16, 0x16)
	EV(Unknown17, 0x17)
	EV(Unknown18, 0x18)
	EV(Unknown19, 0x19)
	EV(Unknown1A, 0x1A)
	EV(Sentinel, 0x1B)
END_ENUM()

BEGIN_ENUM(SpellAttackTypeOverride, uint8_t)
	EV(Target_MainHandAttack, 0)
	EV(Target_OffhandAttack, 1)
	EV(Projectile_MainHandAttack, 2)
	EV(Projectile_OffhandAttack, 3)
	EV(Target_UnarmedAttack, 4)
END_ENUM()


BEGIN_ENUM(ResourceBankType, uint32_t)
	EV(Visual, 0)
	EV(VisualSet, 1)
	EV(Animation, 2)
	EV(AnimationSet, 3)
	EV(Texture, 4)
	EV(Material, 5)
	EV(Physics, 6)
	EV(Effect, 7)
	EV(Script, 8)
	EV(Sound, 9)
	EV(Lighting, 10)
	EV(Atmosphere, 11)
	EV(AnimationBlueprint, 12)
	EV(MeshProxy, 13)
	EV(MaterialSet, 14)
	EV(BlendSpace, 15)
	EV(FCurve, 16)
	EV(Timeline, 17)
	EV(Dialog, 18)
	EV(VoiceBark, 19)
	EV(TileSet, 20)
	EV(IKRig, 21)
	EV(Skeleton, 22)
	EV(VirtualTexture, 23)
	EV(TerrainBrush, 24)
	EV(ColorList, 25)
	EV(CharacterVisual, 26)
	EV(MaterialPreset, 27)
	EV(SkinPreset, 28)
	EV(ClothCollider, 29)
	EV(DiffusionProfile, 30)
	EV(LightCookie, 31)
	EV(TimelineScene, 32)
	EV(SkeletonMirrorTable, 33)
	EV(Sentinel, 34)
END_ENUM()


BEGIN_ENUM(SurfaceType, uint8_t)
	EV(None, 0)
	EV(Water, 1)
	EV(WaterElectrified, 2)
	EV(WaterFrozen, 3)
	EV(Blood, 4)
	EV(BloodElectrified, 5)
	EV(BloodFrozen, 6)
	EV(Poison, 7)
	EV(Oil, 8)
	EV(Lava, 9)
	EV(Grease, 10)
	EV(WyvernPoison, 11)
	EV(Web, 12)
	EV(Deepwater, 13)
	EV(Vines, 14)
	EV(Fire, 15)
	EV(Acid, 16)
	EV(TrialFire, 17)
	EV(BlackPowder, 18)
	EV(ShadowCursedVines, 19)
	EV(AlienOil, 20)
	EV(Mud, 21)
	EV(Alcohol, 22)
	EV(InvisibleWeb, 23)
	EV(BloodSilver, 24)
	EV(Chasm, 25)
	EV(Hellfire, 26)
	EV(CausticBrine, 27)
	EV(BloodExploding, 28)
	EV(Ash, 29)
	EV(SpikeGrowth, 30)
	EV(HolyFire, 31)
	EV(BlackTentacles, 32)
	EV(Overgrowth, 33)
	EV(PurpleWormPoison, 34)
	EV(SerpentVenom, 35)
	EV(InvisibleGithAcid, 36)
	EV(BladeBarrier, 37)
	EV(Sewer, 38)
	EV(WaterCloud, 39)
	EV(WaterCloudElectrified, 40)
	EV(PoisonCloud, 41)
	EV(ExplosionCloud, 42)
	EV(ShockwaveCloud, 43)
	EV(CloudkillCloud, 44)
	EV(MaliceCloud, 45)
	EV(BloodCloud, 46)
	EV(StinkingCloud, 47)
	EV(DarknessCloud, 48)
	EV(FogCloud, 49)
	EV(GithPheromoneGasCloud, 50)
	EV(SporeWhiteCloud, 51)
	EV(SporeGreenCloud, 52)
	EV(SporeBlackCloud, 53)
	EV(DrowPoisonCloud, 54)
	EV(IceCloud, 55)
	EV(PotionHealingCloud, 56)
	EV(PotionHealingGreaterCloud, 57)
	EV(PotionHealingSuperiorCloud, 58)
	EV(PotionHealingSupremeCloud, 59)
	EV(PotionInvisibilityCloud, 60)
	EV(PotionSpeedCloud, 61)
	EV(PotionVitalityCloud, 62)
	EV(PotionAntitoxinCloud, 63)
	EV(PotionResistanceAcidCloud, 64)
	EV(PotionResistanceColdCloud, 65)
	EV(PotionResistanceFireCloud, 66)
	EV(PotionResistanceForceCloud, 67)
	EV(PotionResistanceLightningCloud, 68)
	EV(PotionResistancePoisonCloud, 69)
	EV(SporePinkCloud, 70)
	EV(BlackPowderDetonationCloud, 71)
	EV(VoidCloud, 72)
	EV(CrawlerMucusCloud, 73)
	EV(Cloudkill6Cloud, 74)
	EV(Sentinel, 75)
END_ENUM()


BEGIN_ENUM(SurfaceLayer, uint32_t)
	EV(Ground, 0)
	EV(Cloud, 1)
	EV(None, 2)
END_ENUM()


BEGIN_ENUM(SurfaceLayer8, uint8_t)
	EV(Ground, 0)
	EV(Cloud, 1)
	EV(None, 2)
END_ENUM()


BEGIN_ENUM(SurfaceActionType, uint8_t)
	EV(CreateSurfaceAction, 1)
	EV(CreatePuddleAction, 2)
	EV(ExtinguishFireAction, 3)
	EV(ZoneAction, 4)
	EV(TransformSurfaceAction, 5)
	EV(ChangeSurfaceOnPathAction, 6)
	EV(RectangleSurfaceAction, 7)
	EV(PolygonSurfaceAction, 8)
END_ENUM()


BEGIN_ENUM(SurfaceTransformActionType, uint32_t)
	E(None)
	E(Ignite)
	E(Douse)
	E(Electrify)
	E(Deelectrify)
	E(Freeze)
	E(Melt)
	E(Vaporize)
	E(Condense)
END_ENUM()


BEGIN_BITMASK(ESurfaceFlag, uint64_t)
	// AI grid painted flags
	EV(MovementBlock, 0x1)
	EV(ProjectileBlock, 0x4)

	// Guessed flags
	EV(HasCharacter, 0x10)
	EV(HasItem, 0x80)
	EV(HasInteractableObject, 0x100)
	EV(GroundSurfaceBlock, 0x200)
	EV(CloudSurfaceBlock, 0x400)
	EV(Occupied, 0x1000)
	EV(SurfaceExclude, 0x10000)

	// --- BASE TYPE START
	EV(Fire, 0x1000000)
	EV(Water, 0x2000000)
	EV(Blood, 0x4000000)
	EV(Poison, 0x8000000)
	EV(Oil, 0x10000000)
	EV(Lava, 0x20000000)
	EV(Source, 0x40000000)
	EV(Web, 0x80000000)
	EV(Deepwater, 0x100000000)
	EV(Sulfurium, 0x200000000)
	// UNUSED = 0x400000000
	// --- BASE TYPE END


	// --- CLOUD TYPE START
	EV(FireCloud, 0x800000000)
	EV(WaterCloud, 0x1000000000)
	EV(BloodCloud, 0x2000000000)
	EV(PoisonCloud, 0x4000000000)
	EV(SmokeCloud, 0x8000000000)
	EV(ExplosionCloud, 0x10000000000)
	EV(FrostCloud, 0x20000000000)
	EV(Deathfog, 0x40000000000)
	EV(ShockwaveCloud, 0x80000000000)
	// UNUSED = 0x100000000000
	// UNUSED = 0x200000000000
	// --- CLOUD TYPE END

	EV(Blessed, 0x400000000000)
	EV(Cursed, 0x800000000000)
	EV(Purified, 0x1000000000000)
	// ??? = 0x2000000000000

	// --- SURFACE ADJ START
	EV(CloudBlessed, 0x4000000000000)
	EV(CloudCursed, 0x8000000000000)
	EV(CloudPurified, 0x10000000000000)
	// UNUSED = 0x20000000000000
	// --- SURFACE ADJ END

	// --- GROUND MOD START
	EV(Electrified, 0x40000000000000)
	EV(Frozen, 0x80000000000000)
	EV(CloudElectrified, 0x100000000000000)
	// --- GROUND MOD END

	// --- CLOUD MOD START
	EV(ElectrifiedDecay, 0x200000000000000)
	EV(SomeDecay, 0x400000000000000)
	// UNUSED = 0x800000000000000
	// --- CLOUD MOD END

	// AI grid painted flags
	EV(Irreplaceable, 0x4000000000000000)
	EV(IrreplaceableCloud, 0x800000000000000)
END_ENUM()

BEGIN_BITMASK(AnimationSetAnimationFlags, uint8_t)
	EV(AlwaysIgnore, 1)
	EV(NoFallback, 2)
END_ENUM()

BEGIN_ENUM(AnimationEventPropertyType, uint8_t)
	EV(SoundObject, 1)
	EV(BoneEffect, 2)
	EV(Foot, 3)
	EV(BoneAttachBone, 4)
	EV(WeaponEffect, 6)
	EV(Unknown7, 7)
	EV(Unknown8, 8)
	EV(Prop9, 9)
	EV(Prop10, 10)
	EV(FloatData, 11)
	EV(EFoleySoundObject, 12)
	EV(EVocalSoundObject, 13)
	EV(U8Data, 14)
	EV(Unknown15, 15)
END_ENUM()

BEGIN_ENUM(EffectPropertyType, uint8_t)
	EV(Bool, 0)
	EV(Int32, 1)
	EV(Int32Range, 2)
	EV(ColoredFrames, 3)
	EV(Float, 4)
	EV(FloatRange, 5)
	EV(Frames, 6)
	EV(STDString, 7)
	EV(Vector3, 8)
	EV(FunctionType, 9)
	EV(FixedString, 10)
	EV(Base, 11)
END_ENUM()
